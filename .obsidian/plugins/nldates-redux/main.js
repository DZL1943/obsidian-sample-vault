"use strict";var e=require("obsidian");function t(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var n=t(e);function r(e,t,n,r){return new(n||(n=Promise))((function(a,s){function i(e){try{u(r.next(e))}catch(e){s(e)}}function o(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}u((r=r.apply(e,t||[])).next())}))}var a="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function s(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function i(e){if(e.__esModule)return e;var t=Object.defineProperty({},"__esModule",{value:!0});return Object.keys(e).forEach((function(n){var r=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,r.get?r:{enumerable:!0,get:function(){return e[n]}})})),t}var o={};Object.defineProperty(o,"__esModule",{value:!0});var u=n.default;const d="YYYY-MM-DD",l="gggg-[W]ww",c="YYYY-MM",m="YYYY-[Q]Q",f="YYYY";function h(e){const t=window.app.plugins.getPlugin("periodic-notes");return t&&t.settings?.[e]?.enabled}function p(){try{const{internalPlugins:e,plugins:t}=window.app;if(h("daily")){const{format:e,folder:n,template:r}=t.getPlugin("periodic-notes")?.settings?.daily||{};return{format:e||d,folder:n?.trim()||"",template:r?.trim()||""}}const{folder:n,format:r,template:a}=e.getPluginById("daily-notes")?.instance?.options||{};return{format:r||d,folder:n?.trim()||"",template:a?.trim()||""}}catch(e){console.info("No custom daily note settings found!",e)}}function g(){try{const e=window.app.plugins,t=e.getPlugin("calendar")?.options,n=e.getPlugin("periodic-notes")?.settings?.weekly;if(h("weekly"))return{format:n.format||l,folder:n.folder?.trim()||"",template:n.template?.trim()||""};const r=t||{};return{format:r.weeklyNoteFormat||l,folder:r.weeklyNoteFolder?.trim()||"",template:r.weeklyNoteTemplate?.trim()||""}}catch(e){console.info("No custom weekly note settings found!",e)}}function y(){const e=window.app.plugins;try{const t=h("monthly")&&e.getPlugin("periodic-notes")?.settings?.monthly||{};return{format:t.format||c,folder:t.folder?.trim()||"",template:t.template?.trim()||""}}catch(e){console.info("No custom monthly note settings found!",e)}}function T(){const e=window.app.plugins;try{const t=h("quarterly")&&e.getPlugin("periodic-notes")?.settings?.quarterly||{};return{format:t.format||m,folder:t.folder?.trim()||"",template:t.template?.trim()||""}}catch(e){console.info("No custom quarterly note settings found!",e)}}function _(){const e=window.app.plugins;try{const t=h("yearly")&&e.getPlugin("periodic-notes")?.settings?.yearly||{};return{format:t.format||f,folder:t.folder?.trim()||"",template:t.template?.trim()||""}}catch(e){console.info("No custom yearly note settings found!",e)}}function w(...e){let t=[];for(let n=0,r=e.length;n<r;n++)t=t.concat(e[n].split("/"));const n=[];for(let e=0,r=t.length;e<r;e++){const r=t[e];r&&"."!==r&&n.push(r)}return""===t[0]&&n.unshift(""),n.join("/")}async function M(e,t){t.endsWith(".md")||(t+=".md");const n=u.normalizePath(w(e,t));return await async function(e){const t=e.replace(/\\/g,"/").split("/");if(t.pop(),t.length){const e=w(...t);window.app.vault.getAbstractFileByPath(e)||await window.app.vault.createFolder(e)}}(n),n}async function P(e){const{metadataCache:t,vault:n}=window.app,r=u.normalizePath(e);if("/"===r)return Promise.resolve(["",null]);try{const e=t.getFirstLinkpathDest(r,""),a=await n.cachedRead(e);return[a,window.app.foldManager.load(e)]}catch(e){return console.error(`Failed to read the daily note template '${r}'`,e),new u.Notice("Failed to read the daily note template"),["",null]}}function v(e,t="day"){return`${t}-${e.clone().startOf(t).format()}`}function b(e){return e.replace(/\[[^\]]*\]/g,"")}function C(e,t){return A(e.basename,t)}function A(e,t){const n={day:p,week:g,month:y,quarter:T,year:_}[t]().format.split("/").pop(),r=window.moment(e,n,!0);if(!r.isValid())return null;if(function(e,t){if("week"===t){const t=b(e);return/w{1,2}/i.test(t)&&(/M{1,4}/.test(t)||/D{1,4}/.test(t))}return!1}(n,t)&&"week"===t){const t=b(n);if(/w{1,2}/i.test(t))return window.moment(e,n.replace(/M{1,4}/g,"").replace(/D{1,4}/g,""),!1)}return r}class N extends Error{}async function D(e){const t=window.app,{vault:n}=t,r=window.moment,{template:a,format:s,folder:i}=p(),[o,d]=await P(a),l=e.format(s),c=await M(i,l);try{const a=await n.create(c,o.replace(/{{\s*date\s*}}/gi,l).replace(/{{\s*time\s*}}/gi,r().format("HH:mm")).replace(/{{\s*title\s*}}/gi,l).replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,((t,n,a,i,o,u)=>{const d=r(),l=e.clone().set({hour:d.get("hour"),minute:d.get("minute"),second:d.get("second")});return a&&l.add(parseInt(i,10),o),u?l.format(u.substring(1).trim()):l.format(s)})).replace(/{{\s*yesterday\s*}}/gi,e.clone().subtract(1,"day").format(s)).replace(/{{\s*tomorrow\s*}}/gi,e.clone().add(1,"d").format(s)));return t.foldManager.save(a,d),a}catch(e){console.error(`Failed to create file: '${c}'`,e),new u.Notice("Unable to create new file.")}}class O extends Error{}function E(e){return function(){const{moment:e}=window;let t=e.localeData()._week.dow;const n=["sunday","monday","tuesday","wednesday","thursday","friday","saturday"];for(;t;)n.push(n.shift()),t--;return n}().indexOf(e.toLowerCase())}async function R(e){const{vault:t}=window.app,{template:n,format:r,folder:a}=g(),[s,i]=await P(n),o=e.format(r),d=await M(a,o);try{const n=await t.create(d,s.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,((t,n,a,s,i,o)=>{const u=window.moment(),d=e.clone().set({hour:u.get("hour"),minute:u.get("minute"),second:u.get("second")});return a&&d.add(parseInt(s,10),i),o?d.format(o.substring(1).trim()):d.format(r)})).replace(/{{\s*title\s*}}/gi,o).replace(/{{\s*time\s*}}/gi,window.moment().format("HH:mm")).replace(/{{\s*(sunday|monday|tuesday|wednesday|thursday|friday|saturday)\s*:(.*?)}}/gi,((t,n,r)=>{const a=E(n);return e.weekday(a).format(r.trim())})));return window.app.foldManager.save(n,i),n}catch(e){console.error(`Failed to create file: '${d}'`,e),new u.Notice("Unable to create new file.")}}class x extends Error{}async function I(e){const{vault:t}=window.app,{template:n,format:r,folder:a}=y(),[s,i]=await P(n),o=e.format(r),d=await M(a,o);try{const n=await t.create(d,s.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,((t,n,a,s,i,o)=>{const u=window.moment(),d=e.clone().set({hour:u.get("hour"),minute:u.get("minute"),second:u.get("second")});return a&&d.add(parseInt(s,10),i),o?d.format(o.substring(1).trim()):d.format(r)})).replace(/{{\s*date\s*}}/gi,o).replace(/{{\s*time\s*}}/gi,window.moment().format("HH:mm")).replace(/{{\s*title\s*}}/gi,o));return window.app.foldManager.save(n,i),n}catch(e){console.error(`Failed to create file: '${d}'`,e),new u.Notice("Unable to create new file.")}}class S extends Error{}class k extends Error{}function W(){const{app:e}=window;if(e.plugins.getPlugin("calendar"))return!0;const t=e.plugins.getPlugin("periodic-notes");return t&&t.settings?.weekly?.enabled}function j(){const{app:e}=window,t=e.plugins.getPlugin("periodic-notes");return t&&t.settings?.monthly?.enabled}function $(){const{app:e}=window,t=e.plugins.getPlugin("periodic-notes");return t&&t.settings?.quarterly?.enabled}function Y(){const{app:e}=window,t=e.plugins.getPlugin("periodic-notes");return t&&t.settings?.yearly?.enabled}o.DEFAULT_DAILY_NOTE_FORMAT=d,o.DEFAULT_MONTHLY_NOTE_FORMAT=c,o.DEFAULT_QUARTERLY_NOTE_FORMAT=m,o.DEFAULT_WEEKLY_NOTE_FORMAT=l,o.DEFAULT_YEARLY_NOTE_FORMAT=f,o.appHasDailyNotesPluginLoaded=function(){const{app:e}=window,t=e.internalPlugins.plugins["daily-notes"];if(t&&t.enabled)return!0;const n=e.plugins.getPlugin("periodic-notes");return n&&n.settings?.daily?.enabled},o.appHasMonthlyNotesPluginLoaded=j,o.appHasQuarterlyNotesPluginLoaded=$,o.appHasWeeklyNotesPluginLoaded=W,o.appHasYearlyNotesPluginLoaded=Y;var F=o.createDailyNote=D;o.createMonthlyNote=I,o.createPeriodicNote=function(e,t){return{day:D,month:I,week:R}[e](t)},o.createQuarterlyNote=async function(e){const{vault:t}=window.app,{template:n,format:r,folder:a}=T(),[s,i]=await P(n),o=e.format(r),d=await M(a,o);try{const n=await t.create(d,s.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,((t,n,a,s,i,o)=>{const u=window.moment(),d=e.clone().set({hour:u.get("hour"),minute:u.get("minute"),second:u.get("second")});return a&&d.add(parseInt(s,10),i),o?d.format(o.substring(1).trim()):d.format(r)})).replace(/{{\s*date\s*}}/gi,o).replace(/{{\s*time\s*}}/gi,window.moment().format("HH:mm")).replace(/{{\s*title\s*}}/gi,o));return window.app.foldManager.save(n,i),n}catch(e){console.error(`Failed to create file: '${d}'`,e),new u.Notice("Unable to create new file.")}},o.createWeeklyNote=R,o.createYearlyNote=async function(e){const{vault:t}=window.app,{template:n,format:r,folder:a}=_(),[s,i]=await P(n),o=e.format(r),d=await M(a,o);try{const n=await t.create(d,s.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,((t,n,a,s,i,o)=>{const u=window.moment(),d=e.clone().set({hour:u.get("hour"),minute:u.get("minute"),second:u.get("second")});return a&&d.add(parseInt(s,10),i),o?d.format(o.substring(1).trim()):d.format(r)})).replace(/{{\s*date\s*}}/gi,o).replace(/{{\s*time\s*}}/gi,window.moment().format("HH:mm")).replace(/{{\s*title\s*}}/gi,o));return window.app.foldManager.save(n,i),n}catch(e){console.error(`Failed to create file: '${d}'`,e),new u.Notice("Unable to create new file.")}};var B=o.getAllDailyNotes=function(){const{vault:e}=window.app,{folder:t}=p(),n=e.getAbstractFileByPath(u.normalizePath(t));if(!n)throw new N("Failed to find daily notes folder");const r={};return u.Vault.recurseChildren(n,(e=>{if(e instanceof u.TFile){const t=C(e,"day");if(t){const n=v(t,"day");r[n]=e}}})),r};o.getAllMonthlyNotes=function(){const e={};if(!j())return e;const{vault:t}=window.app,{folder:n}=y(),r=t.getAbstractFileByPath(u.normalizePath(n));if(!r)throw new x("Failed to find monthly notes folder");return u.Vault.recurseChildren(r,(t=>{if(t instanceof u.TFile){const n=C(t,"month");if(n){const r=v(n,"month");e[r]=t}}})),e},o.getAllQuarterlyNotes=function(){const e={};if(!$())return e;const{vault:t}=window.app,{folder:n}=T(),r=t.getAbstractFileByPath(u.normalizePath(n));if(!r)throw new S("Failed to find quarterly notes folder");return u.Vault.recurseChildren(r,(t=>{if(t instanceof u.TFile){const n=C(t,"quarter");if(n){const r=v(n,"quarter");e[r]=t}}})),e},o.getAllWeeklyNotes=function(){const e={};if(!W())return e;const{vault:t}=window.app,{folder:n}=g(),r=t.getAbstractFileByPath(u.normalizePath(n));if(!r)throw new O("Failed to find weekly notes folder");return u.Vault.recurseChildren(r,(t=>{if(t instanceof u.TFile){const n=C(t,"week");if(n){const r=v(n,"week");e[r]=t}}})),e},o.getAllYearlyNotes=function(){const e={};if(!Y())return e;const{vault:t}=window.app,{folder:n}=_(),r=t.getAbstractFileByPath(u.normalizePath(n));if(!r)throw new k("Failed to find yearly notes folder");return u.Vault.recurseChildren(r,(t=>{if(t instanceof u.TFile){const n=C(t,"year");if(n){const r=v(n,"year");e[r]=t}}})),e};var U=o.getDailyNote=function(e,t){return t[v(e,"day")]??null};o.getDailyNoteSettings=p,o.getDateFromFile=C,o.getDateFromPath=function(e,t){return A(function(e){let t=e.substring(e.lastIndexOf("/")+1);return-1!=t.lastIndexOf(".")&&(t=t.substring(0,t.lastIndexOf("."))),t}(e),t)},o.getDateUID=v,o.getMonthlyNote=function(e,t){return t[v(e,"month")]??null},o.getMonthlyNoteSettings=y,o.getPeriodicNoteSettings=function(e){return(0,{day:p,week:g,month:y,quarter:T,year:_}[e])()},o.getQuarterlyNote=function(e,t){return t[v(e,"quarter")]??null},o.getQuarterlyNoteSettings=T,o.getTemplateInfo=P,o.getWeeklyNote=function(e,t){return t[v(e,"week")]??null},o.getWeeklyNoteSettings=g,o.getYearlyNote=function(e,t){return t[v(e,"year")]??null},o.getYearlyNoteSettings=_;const L=["sunday","monday","tuesday","wednesday","thursday","friday","saturday"];function H(){const e=window.moment.localeData()._week.dow;return L[e]}function z(t,n,r){const a=t.vault.getConfig("useMarkdownLinks"),s=e.normalizePath(n);return a?r?`[${r}](${s.replace(/ /g,"%20")})`:`[${n}](${s})`:r?`[[${s}|${r}]]`:`[[${s}]]`}function V(e,t,n){if(n)return t;if(e.settings.defaultAlias){const n=e.parseDate(t);return n.moment.isValid()?n.moment.format(e.settings.defaultAlias):void 0}}function K(e){return r(this,void 0,void 0,(function*(){const t=U(e,B());return t?Promise.resolve(t):F(e)}))}const G={first:1,second:2,third:3,fourth:4,fifth:5,sixth:6,seventh:7,eighth:8,ninth:9,tenth:10,eleventh:11,twelfth:12,thirteenth:13,fourteenth:14,fifteenth:15,sixteenth:16,seventeenth:17,eighteenth:18,nineteenth:19,twentieth:20,"twenty first":21,"twenty-first":21,"twenty second":22,"twenty-second":22,"twenty third":23,"twenty-third":23,"twenty fourth":24,"twenty-fourth":24,"twenty fifth":25,"twenty-fifth":25,"twenty sixth":26,"twenty-sixth":26,"twenty seventh":27,"twenty-seventh":27,"twenty eighth":28,"twenty-eighth":28,"twenty ninth":29,"twenty-ninth":29,thirtieth:30,"thirty first":31,"thirty-first":31},q=`(?:${Z=G,`(?:${function(e){let t;return t=e instanceof Array?[...e]:e instanceof Map?Array.from(e.keys()):Object.keys(e),t}(Z).sort(((e,t)=>t.length-e.length)).join("|").replace(/\./g,"\\.")})`}|[0-9]{1,2}(?:st|nd|rd|th)?)`;var Z;function J(e){let t=e.toLowerCase();return void 0!==G[t]?G[t]:(t=t.replace(/(?:st|nd|rd|th)$/i,""),parseInt(t))}class Q extends e.Modal{constructor(e,t){super(e),this.plugin=t}onOpen(){let t,n="",r=this.plugin.settings.modalMomentFormat,a=this.plugin.settings.modalToggleLink;const s=()=>{let e=n,t=!1;n.endsWith("|")&&(t=!0,e=n.slice(0,-1));const s=this.plugin.parseDate(e||"today");let i=s.moment.isValid()?s.moment.format(r):"";if(a){const n=V(this.plugin,e,t);i=z(this.app,i,n)}return i};this.contentEl.createEl("form",{},(i=>{const o=new e.Setting(i).setName("Date").setDesc(s()).addText((e=>{e.setPlaceholder("Today"),e.onChange((e=>{n=e,t.setText(s())})),window.setTimeout((()=>e.inputEl.focus()),10)}));t=o.descEl,new e.Setting(i).setName("Date format").setDesc("Moment format to be used").addMomentFormat((e=>{e.setPlaceholder("YYYY-MM-DD HH:mm"),e.setValue(r),e.onChange((e=>{r=e.trim()||"YYYY-MM-DD HH:mm",this.plugin.settings.modalMomentFormat=r,this.plugin.saveSettings(),t.setText(s())}))})),new e.Setting(i).setName("Add as link?").addToggle((e=>{e.setValue(this.plugin.settings.modalToggleLink).onChange((e=>{a=e,this.plugin.settings.modalToggleLink=a,this.plugin.saveSettings(),t.setText(s())}))})),i.createDiv("modal-button-container",(e=>{e.createEl("button",{attr:{type:"button"},text:"Never mind"}).addEventListener("click",(()=>this.close())),e.createEl("button",{attr:{type:"submit"},cls:"mod-cta",text:"Insert date"})}));const u=this.app.workspace.getActiveViewOfType(e.MarkdownView).editor;i.addEventListener("submit",(e=>{e.preventDefault(),this.close(),u.replaceSelection(s())}))}))}}var X={},ee={},te={},ne={},re={};function ae(e){let t;return t=e instanceof Array?[...e]:e instanceof Map?Array.from(e.keys()):Object.keys(e),t}Object.defineProperty(re,"__esModule",{value:!0}),re.matchAnyPattern=re.extractTerms=re.repeatedTimeunitPattern=void 0,re.repeatedTimeunitPattern=function(e,t){const n=t.replace(/\((?!\?)/g,"(?:");return`${e}${n}\\s{0,5}(?:,?\\s{0,5}${n}){0,10}`},re.extractTerms=ae,re.matchAnyPattern=function(e){return`(?:${ae(e).sort(((e,t)=>t.length-e.length)).join("|").replace(/\./g,"\\.")})`};var se={},ie=1e3,oe=6e4,ue=36e5,de="millisecond",le="second",ce="minute",me="hour",fe="day",he="week",pe="month",ge="quarter",ye="year",Te="date",_e="Invalid Date",we=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[^0-9]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?\.?(\d+)?$/,Me=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,Pe={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_")},ve=function(e,t,n){var r=String(e);return!r||r.length>=t?e:""+Array(t+1-r.length).join(n)+e},be={s:ve,z:function(e){var t=-e.utcOffset(),n=Math.abs(t),r=Math.floor(n/60),a=n%60;return(t<=0?"+":"-")+ve(r,2,"0")+":"+ve(a,2,"0")},m:function e(t,n){if(t.date()<n.date())return-e(n,t);var r=12*(n.year()-t.year())+(n.month()-t.month()),a=t.clone().add(r,pe),s=n-a<0,i=t.clone().add(r+(s?-1:1),pe);return+(-(r+(n-a)/(s?a-i:i-a))||0)},a:function(e){return e<0?Math.ceil(e)||0:Math.floor(e)},p:function(e){return{M:pe,y:ye,w:he,d:fe,D:Te,h:me,m:ce,s:le,ms:de,Q:ge}[e]||String(e||"").toLowerCase().replace(/s$/,"")},u:function(e){return void 0===e}},Ce="en",Ae={};Ae[Ce]=Pe;var Ne=function(e){return e instanceof Re},De=function(e,t,n){var r;if(!e)return Ce;if("string"==typeof e)Ae[e]&&(r=e),t&&(Ae[e]=t,r=e);else{var a=e.name;Ae[a]=e,r=a}return!n&&r&&(Ce=r),r||!n&&Ce},Oe=function(e,t){if(Ne(e))return e.clone();var n="object"==typeof t?t:{};return n.date=e,n.args=arguments,new Re(n)},Ee=be;Ee.l=De,Ee.i=Ne,Ee.w=function(e,t){return Oe(e,{locale:t.$L,utc:t.$u,x:t.$x,$offset:t.$offset})};var Re=function(){function e(e){this.$L=De(e.locale,null,!0),this.parse(e)}var t=e.prototype;return t.parse=function(e){this.$d=function(e){var t=e.date,n=e.utc;if(null===t)return new Date(NaN);if(Ee.u(t))return new Date;if(t instanceof Date)return new Date(t);if("string"==typeof t&&!/Z$/i.test(t)){var r=t.match(we);if(r){var a=r[2]-1||0,s=(r[7]||"0").substring(0,3);return n?new Date(Date.UTC(r[1],a,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],a,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(t)}(e),this.$x=e.x||{},this.init()},t.init=function(){var e=this.$d;this.$y=e.getFullYear(),this.$M=e.getMonth(),this.$D=e.getDate(),this.$W=e.getDay(),this.$H=e.getHours(),this.$m=e.getMinutes(),this.$s=e.getSeconds(),this.$ms=e.getMilliseconds()},t.$utils=function(){return Ee},t.isValid=function(){return!(this.$d.toString()===_e)},t.isSame=function(e,t){var n=Oe(e);return this.startOf(t)<=n&&n<=this.endOf(t)},t.isAfter=function(e,t){return Oe(e)<this.startOf(t)},t.isBefore=function(e,t){return this.endOf(t)<Oe(e)},t.$g=function(e,t,n){return Ee.u(e)?this[t]:this.set(n,e)},t.unix=function(){return Math.floor(this.valueOf()/1e3)},t.valueOf=function(){return this.$d.getTime()},t.startOf=function(e,t){var n=this,r=!!Ee.u(t)||t,a=Ee.p(e),s=function(e,t){var a=Ee.w(n.$u?Date.UTC(n.$y,t,e):new Date(n.$y,t,e),n);return r?a:a.endOf(fe)},i=function(e,t){return Ee.w(n.toDate()[e].apply(n.toDate("s"),(r?[0,0,0,0]:[23,59,59,999]).slice(t)),n)},o=this.$W,u=this.$M,d=this.$D,l="set"+(this.$u?"UTC":"");switch(a){case ye:return r?s(1,0):s(31,11);case pe:return r?s(1,u):s(0,u+1);case he:var c=this.$locale().weekStart||0,m=(o<c?o+7:o)-c;return s(r?d-m:d+(6-m),u);case fe:case Te:return i(l+"Hours",0);case me:return i(l+"Minutes",1);case ce:return i(l+"Seconds",2);case le:return i(l+"Milliseconds",3);default:return this.clone()}},t.endOf=function(e){return this.startOf(e,!1)},t.$set=function(e,t){var n,r=Ee.p(e),a="set"+(this.$u?"UTC":""),s=(n={},n[fe]=a+"Date",n[Te]=a+"Date",n[pe]=a+"Month",n[ye]=a+"FullYear",n[me]=a+"Hours",n[ce]=a+"Minutes",n[le]=a+"Seconds",n[de]=a+"Milliseconds",n)[r],i=r===fe?this.$D+(t-this.$W):t;if(r===pe||r===ye){var o=this.clone().set(Te,1);o.$d[s](i),o.init(),this.$d=o.set(Te,Math.min(this.$D,o.daysInMonth())).$d}else s&&this.$d[s](i);return this.init(),this},t.set=function(e,t){return this.clone().$set(e,t)},t.get=function(e){return this[Ee.p(e)]()},t.add=function(e,t){var n,r=this;e=Number(e);var a=Ee.p(t),s=function(t){var n=Oe(r);return Ee.w(n.date(n.date()+Math.round(t*e)),r)};if(a===pe)return this.set(pe,this.$M+e);if(a===ye)return this.set(ye,this.$y+e);if(a===fe)return s(1);if(a===he)return s(7);var i=(n={},n[ce]=oe,n[me]=ue,n[le]=ie,n)[a]||1,o=this.$d.getTime()+e*i;return Ee.w(o,this)},t.subtract=function(e,t){return this.add(-1*e,t)},t.format=function(e){var t=this;if(!this.isValid())return _e;var n=e||"YYYY-MM-DDTHH:mm:ssZ",r=Ee.z(this),a=this.$locale(),s=this.$H,i=this.$m,o=this.$M,u=a.weekdays,d=a.months,l=function(e,r,a,s){return e&&(e[r]||e(t,n))||a[r].substr(0,s)},c=function(e){return Ee.s(s%12||12,e,"0")},m=a.meridiem||function(e,t,n){var r=e<12?"AM":"PM";return n?r.toLowerCase():r},f={YY:String(this.$y).slice(-2),YYYY:this.$y,M:o+1,MM:Ee.s(o+1,2,"0"),MMM:l(a.monthsShort,o,d,3),MMMM:l(d,o),D:this.$D,DD:Ee.s(this.$D,2,"0"),d:String(this.$W),dd:l(a.weekdaysMin,this.$W,u,2),ddd:l(a.weekdaysShort,this.$W,u,3),dddd:u[this.$W],H:String(s),HH:Ee.s(s,2,"0"),h:c(1),hh:c(2),a:m(s,i,!0),A:m(s,i,!1),m:String(i),mm:Ee.s(i,2,"0"),s:String(this.$s),ss:Ee.s(this.$s,2,"0"),SSS:Ee.s(this.$ms,3,"0"),Z:r};return n.replace(Me,(function(e,t){return t||f[e]||r.replace(":","")}))},t.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},t.diff=function(e,t,n){var r,a=Ee.p(t),s=Oe(e),i=(s.utcOffset()-this.utcOffset())*oe,o=this-s,u=Ee.m(this,s);return u=(r={},r[ye]=u/12,r[pe]=u,r[ge]=u/3,r[he]=(o-i)/6048e5,r[fe]=(o-i)/864e5,r[me]=o/ue,r[ce]=o/oe,r[le]=o/ie,r)[a]||o,n?u:Ee.a(u)},t.daysInMonth=function(){return this.endOf(pe).$D},t.$locale=function(){return Ae[this.$L]},t.locale=function(e,t){if(!e)return this.$L;var n=this.clone(),r=De(e,t,!0);return r&&(n.$L=r),n},t.clone=function(){return Ee.w(this.$d,this)},t.toDate=function(){return new Date(this.valueOf())},t.toJSON=function(){return this.isValid()?this.toISOString():null},t.toISOString=function(){return this.$d.toISOString()},t.toString=function(){return this.$d.toUTCString()},e}(),xe=Re.prototype;Oe.prototype=xe,[["$ms",de],["$s",le],["$m",ce],["$H",me],["$W",fe],["$M",pe],["$y",ye],["$D",Te]].forEach((function(e){xe[e[1]]=function(t){return this.$g(t,e[0],e[1])}})),Oe.extend=function(e,t){return e.$i||(e(t,Re,Oe),e.$i=!0),Oe},Oe.locale=De,Oe.isDayjs=Ne,Oe.unix=function(e){return Oe(1e3*e)},Oe.en=Ae[Ce],Oe.Ls=Ae,Oe.p={};var Ie=i(Object.freeze({__proto__:null,default:Oe})),Se=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(se,"__esModule",{value:!0}),se.findYearClosestToRef=se.findMostLikelyADYear=void 0;const ke=Se(Ie);se.findMostLikelyADYear=function(e){return e<100&&(e+=e>50?1900:2e3),e},se.findYearClosestToRef=function(e,t,n){const r=(0,ke.default)(e);let a=r;a=a.month(n-1),a=a.date(t),a=a.year(r.year());const s=a.add(1,"y"),i=a.add(-1,"y");return Math.abs(s.diff(r))<Math.abs(a.diff(r))?a=s:Math.abs(i.diff(r))<Math.abs(a.diff(r))&&(a=i),a.year()},function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.parseTimeUnits=e.TIME_UNITS_PATTERN=e.parseYear=e.YEAR_PATTERN=e.parseOrdinalNumberPattern=e.ORDINAL_NUMBER_PATTERN=e.parseNumberPattern=e.NUMBER_PATTERN=e.TIME_UNIT_DICTIONARY=e.ORDINAL_WORD_DICTIONARY=e.INTEGER_WORD_DICTIONARY=e.MONTH_DICTIONARY=e.FULL_MONTH_NAME_DICTIONARY=e.WEEKDAY_DICTIONARY=void 0;const t=re,n=se;function r(t){const n=t.toLowerCase();return void 0!==e.INTEGER_WORD_DICTIONARY[n]?e.INTEGER_WORD_DICTIONARY[n]:"a"===n||"an"===n?1:n.match(/few/)?3:n.match(/half/)?.5:n.match(/couple/)?2:n.match(/several/)?7:parseFloat(n)}e.WEEKDAY_DICTIONARY={sunday:0,sun:0,"sun.":0,monday:1,mon:1,"mon.":1,tuesday:2,tue:2,"tue.":2,wednesday:3,wed:3,"wed.":3,thursday:4,thurs:4,"thurs.":4,thur:4,"thur.":4,thu:4,"thu.":4,friday:5,fri:5,"fri.":5,saturday:6,sat:6,"sat.":6},e.FULL_MONTH_NAME_DICTIONARY={january:1,february:2,march:3,april:4,may:5,june:6,july:7,august:8,september:9,october:10,november:11,december:12},e.MONTH_DICTIONARY=Object.assign(Object.assign({},e.FULL_MONTH_NAME_DICTIONARY),{jan:1,"jan.":1,feb:2,"feb.":2,mar:3,"mar.":3,apr:4,"apr.":4,jun:6,"jun.":6,jul:7,"jul.":7,aug:8,"aug.":8,sep:9,"sep.":9,sept:9,"sept.":9,oct:10,"oct.":10,nov:11,"nov.":11,dec:12,"dec.":12}),e.INTEGER_WORD_DICTIONARY={one:1,two:2,three:3,four:4,five:5,six:6,seven:7,eight:8,nine:9,ten:10,eleven:11,twelve:12},e.ORDINAL_WORD_DICTIONARY={first:1,second:2,third:3,fourth:4,fifth:5,sixth:6,seventh:7,eighth:8,ninth:9,tenth:10,eleventh:11,twelfth:12,thirteenth:13,fourteenth:14,fifteenth:15,sixteenth:16,seventeenth:17,eighteenth:18,nineteenth:19,twentieth:20,"twenty first":21,"twenty-first":21,"twenty second":22,"twenty-second":22,"twenty third":23,"twenty-third":23,"twenty fourth":24,"twenty-fourth":24,"twenty fifth":25,"twenty-fifth":25,"twenty sixth":26,"twenty-sixth":26,"twenty seventh":27,"twenty-seventh":27,"twenty eighth":28,"twenty-eighth":28,"twenty ninth":29,"twenty-ninth":29,thirtieth:30,"thirty first":31,"thirty-first":31},e.TIME_UNIT_DICTIONARY={sec:"second",second:"second",seconds:"second",min:"minute",mins:"minute",minute:"minute",minutes:"minute",h:"hour",hr:"hour",hrs:"hour",hour:"hour",hours:"hour",day:"d",days:"d",week:"week",weeks:"week",month:"month",months:"month",y:"year",yr:"year",year:"year",years:"year"},e.NUMBER_PATTERN=`(?:${(0,t.matchAnyPattern)(e.INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+\\.[0-9]+|half(?:\\s{0,2}an?)?|an?\\b(?:\\s{0,2}few)?|few|several|a?\\s{0,2}couple\\s{0,2}(?:of)?)`,e.parseNumberPattern=r,e.ORDINAL_NUMBER_PATTERN=`(?:${(0,t.matchAnyPattern)(e.ORDINAL_WORD_DICTIONARY)}|[0-9]{1,2}(?:st|nd|rd|th)?)`,e.parseOrdinalNumberPattern=function(t){let n=t.toLowerCase();return void 0!==e.ORDINAL_WORD_DICTIONARY[n]?e.ORDINAL_WORD_DICTIONARY[n]:(n=n.replace(/(?:st|nd|rd|th)$/i,""),parseInt(n))},e.YEAR_PATTERN="(?:[1-9][0-9]{0,3}\\s{0,2}(?:BE|AD|BC|BCE|CE)|[1-2][0-9]{3}|[5-9][0-9])",e.parseYear=function(e){if(/BE/i.test(e))return e=e.replace(/BE/i,""),parseInt(e)-543;if(/BCE?/i.test(e))return e=e.replace(/BCE?/i,""),-parseInt(e);if(/(AD|CE)/i.test(e))return e=e.replace(/(AD|CE)/i,""),parseInt(e);const t=parseInt(e);return(0,n.findMostLikelyADYear)(t)};const a=`(${e.NUMBER_PATTERN})\\s{0,3}(${(0,t.matchAnyPattern)(e.TIME_UNIT_DICTIONARY)})`,s=new RegExp(a,"i");function i(t,n){const a=r(n[1]);t[e.TIME_UNIT_DICTIONARY[n[2].toLowerCase()]]=a}e.TIME_UNITS_PATTERN=(0,t.repeatedTimeunitPattern)("(?:(?:about|around)\\s{0,3})?",a),e.parseTimeUnits=function(e){const t={};let n=e,r=s.exec(n);for(;r;)i(t,r),n=n.substring(r[0].length).trim(),r=s.exec(n);return t}}(ne);var We,je,$e={},Ye={exports:{}};Ye.exports=(We="month",je="quarter",function(e,t){var n=t.prototype;n.quarter=function(e){return this.$utils().u(e)?Math.ceil((this.month()+1)/3):this.month(this.month()%3+3*(e-1))};var r=n.add;n.add=function(e,t){return e=Number(e),this.$utils().p(t)===je?this.add(3*e,We):r.bind(this)(e,t)};var a=n.startOf;n.startOf=function(e,t){var n=this.$utils(),r=!!n.u(t)||t;if(n.p(e)===je){var s=this.quarter()-1;return r?this.month(3*s).startOf(We).startOf("day"):this.month(3*s+2).endOf(We).endOf("day")}return a.bind(this)(e,t)}});var Fe={exports:{}};Fe.exports=function(e,t){t.prototype.weekday=function(e){var t=this.$locale().weekStart||0,n=this.$W,r=(n<t?n+7:n)-t;return this.$utils().u(e)?r:this.subtract(r,"day").add(e,"day")}};var Be={};Object.defineProperty(Be,"__esModule",{value:!0}),Be.implySimilarTime=Be.assignSimilarTime=Be.assignSimilarDate=Be.assignTheNextDay=void 0;const Ue=X;function Le(e,t){e.assign("day",t.date()),e.assign("month",t.month()+1),e.assign("year",t.year())}function He(e,t){e.imply("hour",t.hour()),e.imply("minute",t.minute()),e.imply("second",t.second()),e.imply("millisecond",t.millisecond())}Be.assignTheNextDay=function(e,t){Le(e,t=t.add(1,"day")),He(e,t)},Be.assignSimilarDate=Le,Be.assignSimilarTime=function(e,t){e.assign("hour",t.hour()),e.assign("minute",t.minute()),e.assign("second",t.second()),e.assign("millisecond",t.millisecond()),e.get("hour")<12?e.assign("meridiem",Ue.Meridiem.AM):e.assign("meridiem",Ue.Meridiem.PM)},Be.implySimilarTime=He;var ze,Ve={};ze=Ve,Object.defineProperty(ze,"__esModule",{value:!0}),ze.toTimezoneOffset=ze.TIMEZONE_ABBR_MAP=void 0,ze.TIMEZONE_ABBR_MAP={ACDT:630,ACST:570,ADT:-180,AEDT:660,AEST:600,AFT:270,AKDT:-480,AKST:-540,ALMT:360,AMST:-180,AMT:-240,ANAST:720,ANAT:720,AQTT:300,ART:-180,AST:-240,AWDT:540,AWST:480,AZOST:0,AZOT:-60,AZST:300,AZT:240,BNT:480,BOT:-240,BRST:-120,BRT:-180,BST:60,BTT:360,CAST:480,CAT:120,CCT:390,CDT:-300,CEST:120,CET:60,CHADT:825,CHAST:765,CKT:-600,CLST:-180,CLT:-240,COT:-300,CST:-360,CVT:-60,CXT:420,ChST:600,DAVT:420,EASST:-300,EAST:-360,EAT:180,ECT:-300,EDT:-240,EEST:180,EET:120,EGST:0,EGT:-60,EST:-300,ET:-300,FJST:780,FJT:720,FKST:-180,FKT:-240,FNT:-120,GALT:-360,GAMT:-540,GET:240,GFT:-180,GILT:720,GMT:0,GST:240,GYT:-240,HAA:-180,HAC:-300,HADT:-540,HAE:-240,HAP:-420,HAR:-360,HAST:-600,HAT:-90,HAY:-480,HKT:480,HLV:-210,HNA:-240,HNC:-360,HNE:-300,HNP:-480,HNR:-420,HNT:-150,HNY:-540,HOVT:420,ICT:420,IDT:180,IOT:360,IRDT:270,IRKST:540,IRKT:540,IRST:210,IST:330,JST:540,KGT:360,KRAST:480,KRAT:480,KST:540,KUYT:240,LHDT:660,LHST:630,LINT:840,MAGST:720,MAGT:720,MART:-510,MAWT:300,MDT:-360,MESZ:120,MEZ:60,MHT:720,MMT:390,MSD:240,MSK:180,MST:-420,MUT:240,MVT:300,MYT:480,NCT:660,NDT:-90,NFT:690,NOVST:420,NOVT:360,NPT:345,NST:-150,NUT:-660,NZDT:780,NZST:720,OMSST:420,OMST:420,PDT:-420,PET:-300,PETST:720,PETT:720,PGT:600,PHOT:780,PHT:480,PKT:300,PMDT:-120,PMST:-180,PONT:660,PST:-480,PT:-480,PWT:540,PYST:-180,PYT:-240,RET:240,SAMT:240,SAST:120,SBT:660,SCT:240,SGT:480,SRT:-180,SST:-660,TAHT:-600,TFT:300,TJT:300,TKT:780,TLT:540,TMT:300,TVT:720,ULAT:480,UTC:0,UYST:-120,UYT:-180,UZT:300,VET:-210,VLAST:660,VLAT:660,VUT:660,WAST:120,WAT:60,WEST:60,WESZ:60,WET:0,WEZ:0,WFT:720,WGST:-120,WGT:-180,WIB:420,WIT:540,WITA:480,WST:780,WT:0,YAKST:600,YAKT:600,YAPT:600,YEKST:360,YEKT:360},ze.toTimezoneOffset=function(e){var t;return null===e?null:"number"==typeof e?e:null!==(t=ze.TIMEZONE_ABBR_MAP[e])&&void 0!==t?t:0};var Ke=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty($e,"__esModule",{value:!0}),$e.ParsingResult=$e.ParsingComponents=$e.ReferenceWithTimezone=void 0;const Ge=Ke(Ye.exports),qe=Ke(Fe.exports),Ze=Ke(Ie),Je=Be,Qe=Ve;Ze.default.extend(Ge.default),Ze.default.extend(qe.default);$e.ReferenceWithTimezone=class{constructor(e){var t;(e=null!=e?e:new Date)instanceof Date?(this.instant=e,this.timezoneOffset=-e.getTimezoneOffset()):(this.instant=null!==(t=e.instant)&&void 0!==t?t:new Date,this.timezoneOffset=(0,Qe.toTimezoneOffset)(e.timezone))}};class Xe{constructor(e,t){if(this.reference=e,this.knownValues={},this.impliedValues={},t)for(const e in t)this.knownValues[e]=t[e];const n=(0,Ze.default)(e.instant);this.imply("day",n.date()),this.imply("month",n.month()+1),this.imply("year",n.year()),this.imply("hour",12),this.imply("minute",0),this.imply("second",0),this.imply("millisecond",0)}get(e){return e in this.knownValues?this.knownValues[e]:e in this.impliedValues?this.impliedValues[e]:null}isCertain(e){return e in this.knownValues}getCertainComponents(){return Object.keys(this.knownValues)}imply(e,t){return e in this.knownValues||(this.impliedValues[e]=t),this}assign(e,t){return this.knownValues[e]=t,delete this.impliedValues[e],this}delete(e){delete this.knownValues[e],delete this.impliedValues[e]}clone(){const e=new Xe(this.reference);e.knownValues={},e.impliedValues={};for(const t in this.knownValues)e.knownValues[t]=this.knownValues[t];for(const t in this.impliedValues)e.impliedValues[t]=this.impliedValues[t];return e}isOnlyDate(){return!this.isCertain("hour")&&!this.isCertain("minute")&&!this.isCertain("second")}isOnlyTime(){return!this.isCertain("weekday")&&!this.isCertain("day")&&!this.isCertain("month")}isOnlyWeekdayComponent(){return this.isCertain("weekday")&&!this.isCertain("day")&&!this.isCertain("month")}isOnlyDayMonthComponent(){return this.isCertain("day")&&this.isCertain("month")&&!this.isCertain("year")}isValidDate(){const e=this.dateWithoutTimezoneAdjustment();return e.getFullYear()===this.get("year")&&(e.getMonth()===this.get("month")-1&&(e.getDate()===this.get("day")&&((null==this.get("hour")||e.getHours()==this.get("hour"))&&(null==this.get("minute")||e.getMinutes()==this.get("minute")))))}toString(){return`[ParsingComponents {knownValues: ${JSON.stringify(this.knownValues)}, impliedValues: ${JSON.stringify(this.impliedValues)}}]`}dayjs(){return(0,Ze.default)(this.date())}date(){const e=this.dateWithoutTimezoneAdjustment();return new Date(e.getTime()+6e4*this.getSystemTimezoneAdjustmentMinute(e))}dateWithoutTimezoneAdjustment(){const e=new Date(this.get("year"),this.get("month")-1,this.get("day"),this.get("hour"),this.get("minute"),this.get("second"),this.get("millisecond"));return e.setFullYear(this.get("year")),e}getSystemTimezoneAdjustmentMinute(e){var t,n;(!e||e.getTime()<0)&&(e=new Date);const r=-e.getTimezoneOffset();return r-(null!==(n=null!==(t=this.get("timezoneOffset"))&&void 0!==t?t:this.reference.timezoneOffset)&&void 0!==n?n:r)}static createRelativeFromReference(e,t){let n=(0,Ze.default)(e.instant);for(const e in t)n=n.add(t[e],e);const r=new Xe(e);return t.hour||t.minute||t.second?((0,Je.assignSimilarTime)(r,n),(0,Je.assignSimilarDate)(r,n),null!==e.timezoneOffset&&r.assign("timezoneOffset",-e.instant.getTimezoneOffset())):((0,Je.implySimilarTime)(r,n),null!==e.timezoneOffset&&r.imply("timezoneOffset",-e.instant.getTimezoneOffset()),t.d?(r.assign("day",n.date()),r.assign("month",n.month()+1),r.assign("year",n.year())):(t.week&&r.imply("weekday",n.day()),r.imply("day",n.date()),t.month?(r.assign("month",n.month()+1),r.assign("year",n.year())):(r.imply("month",n.month()+1),t.year?r.assign("year",n.year()):r.imply("year",n.year())))),r}}$e.ParsingComponents=Xe;class et{constructor(e,t,n,r,a){this.reference=e,this.refDate=e.instant,this.index=t,this.text=n,this.start=r||new Xe(e),this.end=a}clone(){const e=new et(this.reference,this.index,this.text);return e.start=this.start?this.start.clone():null,e.end=this.end?this.end.clone():null,e}date(){return this.start.date()}toString(){return`[ParsingResult {index: ${this.index}, text: '${this.text}', ...}]`}}$e.ParsingResult=et;var tt={};Object.defineProperty(tt,"__esModule",{value:!0}),tt.AbstractParserWithWordBoundaryChecking=void 0;tt.AbstractParserWithWordBoundaryChecking=class{constructor(){this.cachedInnerPattern=null,this.cachedPattern=null}pattern(e){const t=this.innerPattern(e);return t==this.cachedInnerPattern||(this.cachedPattern=new RegExp(`(\\W|^)${t.source}`,t.flags),this.cachedInnerPattern=t),this.cachedPattern}extract(e,t){var n;const r=null!==(n=t[1])&&void 0!==n?n:"";t.index=t.index+r.length,t[0]=t[0].substring(r.length);for(let e=2;e<t.length;e++)t[e-1]=t[e];return this.innerExtract(e,t)}},Object.defineProperty(te,"__esModule",{value:!0});const nt=ne,rt=$e,at=tt,st=new RegExp(`(?:within|in|for)\\s*(?:(?:about|around|roughly|approximately|just)\\s*(?:~\\s*)?)?(${nt.TIME_UNITS_PATTERN})(?=\\W|$)`,"i"),it=new RegExp(`(?:(?:about|around|roughly|approximately|just)\\s*(?:~\\s*)?)?(${nt.TIME_UNITS_PATTERN})(?=\\W|$)`,"i");class ot extends at.AbstractParserWithWordBoundaryChecking{innerPattern(e){return e.option.forwardDate?it:st}innerExtract(e,t){const n=(0,nt.parseTimeUnits)(t[1]);return rt.ParsingComponents.createRelativeFromReference(e.reference,n)}}te.default=ot;var ut={};Object.defineProperty(ut,"__esModule",{value:!0});const dt=se,lt=ne,ct=ne,mt=ne,ft=tt,ht=new RegExp(`(?:on\\s{0,3})?(${mt.ORDINAL_NUMBER_PATTERN})(?:\\s{0,3}(?:to|\\-|\\–|until|through|till)?\\s{0,3}(${mt.ORDINAL_NUMBER_PATTERN}))?(?:-|/|\\s{0,3}(?:of)?\\s{0,3})(${(0,re.matchAnyPattern)(lt.MONTH_DICTIONARY)})(?:(?:-|/|,?\\s{0,3})(${ct.YEAR_PATTERN}(?![^\\s]\\d)))?(?=\\W|$)`,"i");class pt extends ft.AbstractParserWithWordBoundaryChecking{innerPattern(){return ht}innerExtract(e,t){const n=e.createParsingResult(t.index,t[0]),r=lt.MONTH_DICTIONARY[t[3].toLowerCase()],a=(0,mt.parseOrdinalNumberPattern)(t[1]);if(a>31)return t.index=t.index+t[1].length,null;if(n.start.assign("month",r),n.start.assign("day",a),t[4]){const e=(0,ct.parseYear)(t[4]);n.start.assign("year",e)}else{const t=(0,dt.findYearClosestToRef)(e.refDate,a,r);n.start.imply("year",t)}if(t[2]){const e=(0,mt.parseOrdinalNumberPattern)(t[2]);n.end=n.start.clone(),n.end.assign("day",e)}return n}}ut.default=pt;var gt={};Object.defineProperty(gt,"__esModule",{value:!0});const yt=se,Tt=ne,_t=ne,wt=ne,Mt=tt,Pt=new RegExp(`(${(0,re.matchAnyPattern)(Tt.MONTH_DICTIONARY)})(?:-|/|\\s*,?\\s*)(${_t.ORDINAL_NUMBER_PATTERN})(?!\\s*(?:am|pm))\\s*(?:(?:to|\\-)\\s*(${_t.ORDINAL_NUMBER_PATTERN})\\s*)?(?:(?:-|/|\\s*,?\\s*)(${wt.YEAR_PATTERN}))?(?=\\W|$)(?!\\:\\d)`,"i");class vt extends Mt.AbstractParserWithWordBoundaryChecking{innerPattern(){return Pt}innerExtract(e,t){const n=Tt.MONTH_DICTIONARY[t[1].toLowerCase()],r=(0,_t.parseOrdinalNumberPattern)(t[2]);if(r>31)return null;const a=e.createParsingComponents({day:r,month:n});if(t[4]){const e=(0,wt.parseYear)(t[4]);a.assign("year",e)}else{const t=(0,yt.findYearClosestToRef)(e.refDate,r,n);a.imply("year",t)}if(!t[3])return a;const s=(0,_t.parseOrdinalNumberPattern)(t[3]),i=e.createParsingResult(t.index,t[0]);return i.start=a,i.end=a.clone(),i.end.assign("day",s),i}}gt.default=vt;var bt={};Object.defineProperty(bt,"__esModule",{value:!0});const Ct=ne,At=se,Nt=ne,Dt=tt,Ot=new RegExp(`((?:in)\\s*)?(${(0,re.matchAnyPattern)(Ct.MONTH_DICTIONARY)})\\s*(?:[,-]?\\s*(${Nt.YEAR_PATTERN})?)?(?=[^\\s\\w]|\\s+[^0-9]|\\s+$|$)`,"i");class Et extends Dt.AbstractParserWithWordBoundaryChecking{innerPattern(){return Ot}innerExtract(e,t){const n=t[2].toLowerCase();if(t[0].length<=3&&!Ct.FULL_MONTH_NAME_DICTIONARY[n])return null;const r=e.createParsingResult(t.index+(t[1]||"").length,t.index+t[0].length);r.start.imply("day",1);const a=Ct.MONTH_DICTIONARY[n];if(r.start.assign("month",a),t[3]){const e=(0,Nt.parseYear)(t[3]);r.start.assign("year",e)}else{const t=(0,At.findYearClosestToRef)(e.refDate,1,a);r.start.imply("year",t)}return r}}bt.default=Et;var Rt={};Object.defineProperty(Rt,"__esModule",{value:!0});const xt=ne,It=tt,St=new RegExp(`([0-9]{4})[\\.\\/\\s](?:(${(0,re.matchAnyPattern)(xt.MONTH_DICTIONARY)})|([0-9]{1,2}))[\\.\\/\\s]([0-9]{1,2})(?=\\W|$)`,"i");class kt extends It.AbstractParserWithWordBoundaryChecking{innerPattern(){return St}innerExtract(e,t){const n=t[3]?parseInt(t[3]):xt.MONTH_DICTIONARY[t[2].toLowerCase()];if(n<1||n>12)return null;const r=parseInt(t[1]);return{day:parseInt(t[4]),month:n,year:r}}}Rt.default=kt;var Wt={};Object.defineProperty(Wt,"__esModule",{value:!0});const jt=tt,$t=new RegExp("([0-9]|0[1-9]|1[012])/([0-9]{4})","i");class Yt extends jt.AbstractParserWithWordBoundaryChecking{innerPattern(){return $t}innerExtract(e,t){const n=parseInt(t[2]),r=parseInt(t[1]);return e.createParsingComponents().imply("day",1).assign("month",r).assign("year",n)}}Wt.default=Yt;var Ft={},Bt={};Object.defineProperty(Bt,"__esModule",{value:!0}),Bt.AbstractTimeExpressionParser=void 0;const Ut=X;Bt.AbstractTimeExpressionParser=class{constructor(e=!1){this.cachedPrimaryPrefix=null,this.cachedPrimarySuffix=null,this.cachedPrimaryTimePattern=null,this.cachedFollowingPhase=null,this.cachedFollowingSuffix=null,this.cachedFollowingTimePatten=null,this.strictMode=e}primarySuffix(){return"(?=\\W|$)"}followingSuffix(){return"(?=\\W|$)"}pattern(e){return this.getPrimaryTimePatternThroughCache()}extract(e,t){const n=this.extractPrimaryTimeComponents(e,t);if(!n)return t.index+=t[0].length,null;const r=t.index+t[1].length,a=t[0].substring(t[1].length),s=e.createParsingResult(r,a,n);t.index+=t[0].length;const i=e.text.substring(t.index),o=this.getFollowingTimePatternThroughCache().exec(i);return!o||o[0].match(/^\s*([+-])\s*\d{3,4}$/)?this.checkAndReturnWithoutFollowingPattern(s):(s.end=this.extractFollowingTimeComponents(e,o,s),s.end&&(s.text+=o[0]),this.checkAndReturnWithFollowingPattern(s))}extractPrimaryTimeComponents(e,t,n=!1){const r=e.createParsingComponents();let a=0,s=null,i=parseInt(t[2]);if(i>100){if(this.strictMode||null!=t[3])return null;a=i%100,i=Math.floor(i/100)}if(i>24)return null;if(null!=t[3]){if(1==t[3].length&&!t[6])return null;a=parseInt(t[3])}if(a>=60)return null;if(i>12&&(s=Ut.Meridiem.PM),null!=t[6]){if(i>12)return null;const e=t[6][0].toLowerCase();"a"==e&&(s=Ut.Meridiem.AM,12==i&&(i=0)),"p"==e&&(s=Ut.Meridiem.PM,12!=i&&(i+=12))}if(r.assign("hour",i),r.assign("minute",a),null!==s?r.assign("meridiem",s):i<12?r.imply("meridiem",Ut.Meridiem.AM):r.imply("meridiem",Ut.Meridiem.PM),null!=t[5]){const e=parseInt(t[5].substring(0,3));if(e>=1e3)return null;r.assign("millisecond",e)}if(null!=t[4]){const e=parseInt(t[4]);if(e>=60)return null;r.assign("second",e)}return r}extractFollowingTimeComponents(e,t,n){const r=e.createParsingComponents();if(null!=t[5]){const e=parseInt(t[5].substring(0,3));if(e>=1e3)return null;r.assign("millisecond",e)}if(null!=t[4]){const e=parseInt(t[4]);if(e>=60)return null;r.assign("second",e)}let a=parseInt(t[2]),s=0,i=-1;if(null!=t[3]?s=parseInt(t[3]):a>100&&(s=a%100,a=Math.floor(a/100)),s>=60||a>24)return null;if(a>=12&&(i=Ut.Meridiem.PM),null!=t[6]){if(a>12)return null;const e=t[6][0].toLowerCase();"a"==e&&(i=Ut.Meridiem.AM,12==a&&(a=0,r.isCertain("day")||r.imply("day",r.get("day")+1))),"p"==e&&(i=Ut.Meridiem.PM,12!=a&&(a+=12)),n.start.isCertain("meridiem")||(i==Ut.Meridiem.AM?(n.start.imply("meridiem",Ut.Meridiem.AM),12==n.start.get("hour")&&n.start.assign("hour",0)):(n.start.imply("meridiem",Ut.Meridiem.PM),12!=n.start.get("hour")&&n.start.assign("hour",n.start.get("hour")+12)))}if(r.assign("hour",a),r.assign("minute",s),i>=0)r.assign("meridiem",i);else{n.start.isCertain("meridiem")&&n.start.get("hour")>12?n.start.get("hour")-12>a?r.imply("meridiem",Ut.Meridiem.AM):a<=12&&(r.assign("hour",a+12),r.assign("meridiem",Ut.Meridiem.PM)):a>12?r.imply("meridiem",Ut.Meridiem.PM):a<=12&&r.imply("meridiem",Ut.Meridiem.AM)}return r.date().getTime()<n.start.date().getTime()&&r.imply("day",r.get("day")+1),r}checkAndReturnWithoutFollowingPattern(e){if(e.text.match(/^\d$/))return null;if(e.text.match(/\d[apAP]$/))return null;const t=e.text.match(/[^\d:.](\d[\d.]+)$/);if(t){const e=t[1];if(this.strictMode)return null;if(e.includes(".")&&!e.match(/\d(\.\d{2})+$/))return null;if(parseInt(e)>24)return null}return e}checkAndReturnWithFollowingPattern(e){if(e.text.match(/^\d+-\d+$/))return null;const t=e.text.match(/[^\d:.](\d[\d.]+)\s*-\s*(\d[\d.]+)$/);if(t){if(this.strictMode)return null;const e=t[1],n=t[2];if(n.includes(".")&&!n.match(/\d(\.\d{2})+$/))return null;const r=parseInt(n),a=parseInt(e);if(r>24||a>24)return null}return e}getPrimaryTimePatternThroughCache(){const e=this.primaryPrefix(),t=this.primarySuffix();return this.cachedPrimaryPrefix===e&&this.cachedPrimarySuffix===t||(this.cachedPrimaryTimePattern=function(e,t){return new RegExp(`(^|\\s|T|\\b)${e}(\\d{1,4})(?:(?:\\.|\\:|\\：)(\\d{1,2})(?:(?:\\:|\\：)(\\d{2})(?:\\.(\\d{1,6}))?)?)?(?:\\s*(a\\.m\\.|p\\.m\\.|am?|pm?))?${t}`,"i")}(e,t),this.cachedPrimaryPrefix=e,this.cachedPrimarySuffix=t),this.cachedPrimaryTimePattern}getFollowingTimePatternThroughCache(){const e=this.followingPhase(),t=this.followingSuffix();return this.cachedFollowingPhase===e&&this.cachedFollowingSuffix===t||(this.cachedFollowingTimePatten=function(e,t){return new RegExp(`^(${e})(\\d{1,4})(?:(?:\\.|\\:|\\：)(\\d{1,2})(?:(?:\\.|\\:|\\：)(\\d{1,2})(?:\\.(\\d{1,6}))?)?)?(?:\\s*(a\\.m\\.|p\\.m\\.|am?|pm?))?${t}`,"i")}(e,t),this.cachedFollowingPhase=e,this.cachedFollowingSuffix=t),this.cachedFollowingTimePatten}},Object.defineProperty(Ft,"__esModule",{value:!0});const Lt=X,Ht=Bt;class zt extends Ht.AbstractTimeExpressionParser{constructor(e){super(e)}followingPhase(){return"\\s*(?:\\-|\\–|\\~|\\〜|to|\\?)\\s*"}primaryPrefix(){return"(?:(?:at|from)\\s*)??"}primarySuffix(){return"(?:\\s*(?:o\\W*clock|at\\s*night|in\\s*the\\s*(?:morning|afternoon)))?(?!/)(?=\\W|$)"}extractPrimaryTimeComponents(e,t){const n=super.extractPrimaryTimeComponents(e,t);if(n){if(t[0].endsWith("night")){const e=n.get("hour");e>=6&&e<12?(n.assign("hour",n.get("hour")+12),n.assign("meridiem",Lt.Meridiem.PM)):e<6&&n.assign("meridiem",Lt.Meridiem.AM)}if(t[0].endsWith("afternoon")){n.assign("meridiem",Lt.Meridiem.PM);const e=n.get("hour");e>=0&&e<=6&&n.assign("hour",n.get("hour")+12)}if(t[0].endsWith("morning")){n.assign("meridiem",Lt.Meridiem.AM);n.get("hour")<12&&n.assign("hour",n.get("hour"))}}return n}}Ft.default=zt;var Vt={},Kt={};Object.defineProperty(Kt,"__esModule",{value:!0}),Kt.addImpliedTimeUnits=Kt.reverseTimeUnits=void 0,Kt.reverseTimeUnits=function(e){const t={};for(const n in e)t[n]=-e[n];return t},Kt.addImpliedTimeUnits=function(e,t){const n=e.clone();let r=e.dayjs();for(const e in t)r=r.add(t[e],e);return("day"in t||"d"in t||"week"in t||"month"in t||"year"in t)&&(n.imply("day",r.date()),n.imply("month",r.month()+1),n.imply("year",r.year())),("second"in t||"minute"in t||"hour"in t)&&(n.imply("second",r.second()),n.imply("minute",r.minute()),n.imply("hour",r.hour())),n},Object.defineProperty(Vt,"__esModule",{value:!0});const Gt=ne,qt=$e,Zt=tt,Jt=Kt,Qt=new RegExp(`(${Gt.TIME_UNITS_PATTERN})\\s{0,5}(?:ago|before|earlier)(?=(?:\\W|$))`,"i"),Xt=new RegExp(`(${Gt.TIME_UNITS_PATTERN})\\s{0,5}ago(?=(?:\\W|$))`,"i");class en extends Zt.AbstractParserWithWordBoundaryChecking{constructor(e){super(),this.strictMode=e}innerPattern(){return this.strictMode?Xt:Qt}innerExtract(e,t){const n=(0,Gt.parseTimeUnits)(t[1]),r=(0,Jt.reverseTimeUnits)(n);return qt.ParsingComponents.createRelativeFromReference(e.reference,r)}}Vt.default=en;var tn={};Object.defineProperty(tn,"__esModule",{value:!0});const nn=ne,rn=$e,an=tt,sn=new RegExp(`(${nn.TIME_UNITS_PATTERN})\\s{0,5}(?:later|after|from now|henceforth|forward|out)(?=(?:\\W|$))`,"i"),on=new RegExp("("+nn.TIME_UNITS_PATTERN+")(later|from now)(?=(?:\\W|$))","i");class un extends an.AbstractParserWithWordBoundaryChecking{constructor(e){super(),this.strictMode=e}innerPattern(){return this.strictMode?on:sn}innerExtract(e,t){const n=(0,nn.parseTimeUnits)(t[1]);return rn.ParsingComponents.createRelativeFromReference(e.reference,n)}}tn.default=un;var dn={},ln={},cn={};Object.defineProperty(cn,"__esModule",{value:!0}),cn.MergingRefiner=cn.Filter=void 0;cn.Filter=class{refine(e,t){return t.filter((t=>this.isValid(e,t)))}};cn.MergingRefiner=class{refine(e,t){if(t.length<2)return t;const n=[];let r=t[0],a=null;for(let s=1;s<t.length;s++){a=t[s];const i=e.text.substring(r.index+r.text.length,a.index);if(this.shouldMergeResults(i,r,a,e)){const t=r,n=a,s=this.mergeResults(i,t,n,e);e.debug((()=>{console.log(`${this.constructor.name} merged ${t} and ${n} into ${s}`)})),r=s}else n.push(r),r=a}return null!=r&&n.push(r),n}},Object.defineProperty(ln,"__esModule",{value:!0});const mn=cn;class fn extends mn.MergingRefiner{shouldMergeResults(e,t,n){return!t.end&&!n.end&&null!=e.match(this.patternBetween())}mergeResults(e,t,n){if(t.start.isOnlyWeekdayComponent()||n.start.isOnlyWeekdayComponent()||(n.start.getCertainComponents().forEach((e=>{t.start.isCertain(e)||t.start.assign(e,n.start.get(e))})),t.start.getCertainComponents().forEach((e=>{n.start.isCertain(e)||n.start.assign(e,t.start.get(e))}))),t.start.date().getTime()>n.start.date().getTime()){let e=t.start.dayjs(),r=n.start.dayjs();t.start.isOnlyWeekdayComponent()&&e.add(-7,"days").isBefore(r)?(e=e.add(-7,"days"),t.start.imply("day",e.date()),t.start.imply("month",e.month()+1),t.start.imply("year",e.year())):n.start.isOnlyWeekdayComponent()&&r.add(7,"days").isAfter(e)?(r=r.add(7,"days"),n.start.imply("day",r.date()),n.start.imply("month",r.month()+1),n.start.imply("year",r.year())):[n,t]=[t,n]}const r=t.clone();return r.start=t.start,r.end=n.start,r.index=Math.min(t.index,n.index),t.index<n.index?r.text=t.text+e+n.text:r.text=n.text+e+t.text,r}}ln.default=fn;var hn=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(dn,"__esModule",{value:!0});const pn=hn(ln);class gn extends pn.default{patternBetween(){return/^\s*(to|-)\s*$/i}}dn.default=gn;var yn={},Tn={},_n={};Object.defineProperty(_n,"__esModule",{value:!0}),_n.mergeDateTimeComponent=_n.mergeDateTimeResult=void 0;const wn=X;function Mn(e,t){const n=e.clone();return t.isCertain("hour")?(n.assign("hour",t.get("hour")),n.assign("minute",t.get("minute")),t.isCertain("second")?(n.assign("second",t.get("second")),t.isCertain("millisecond")?n.assign("millisecond",t.get("millisecond")):n.imply("millisecond",t.get("millisecond"))):(n.imply("second",t.get("second")),n.imply("millisecond",t.get("millisecond")))):(n.imply("hour",t.get("hour")),n.imply("minute",t.get("minute")),n.imply("second",t.get("second")),n.imply("millisecond",t.get("millisecond"))),t.isCertain("timezoneOffset")&&n.assign("timezoneOffset",t.get("timezoneOffset")),t.isCertain("meridiem")?n.assign("meridiem",t.get("meridiem")):null!=t.get("meridiem")&&null==n.get("meridiem")&&n.imply("meridiem",t.get("meridiem")),n.get("meridiem")==wn.Meridiem.PM&&n.get("hour")<12&&(t.isCertain("hour")?n.assign("hour",n.get("hour")+12):n.imply("hour",n.get("hour")+12)),n}_n.mergeDateTimeResult=function(e,t){const n=e.clone(),r=e.start,a=t.start;if(n.start=Mn(r,a),null!=e.end||null!=t.end){const r=Mn(null==e.end?e.start:e.end,null==t.end?t.start:t.end);null==e.end&&r.date().getTime()<n.start.date().getTime()&&(r.isCertain("day")?r.assign("day",r.get("day")+1):r.imply("day",r.get("day")+1)),n.end=r}return n},_n.mergeDateTimeComponent=Mn,Object.defineProperty(Tn,"__esModule",{value:!0});const Pn=cn,vn=_n;class bn extends Pn.MergingRefiner{shouldMergeResults(e,t,n){return(t.start.isOnlyDate()&&n.start.isOnlyTime()||n.start.isOnlyDate()&&t.start.isOnlyTime())&&null!=e.match(this.patternBetween())}mergeResults(e,t,n){const r=t.start.isOnlyDate()?(0,vn.mergeDateTimeResult)(t,n):(0,vn.mergeDateTimeResult)(n,t);return r.index=t.index,r.text=t.text+e+n.text,r}}Tn.default=bn;var Cn=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(yn,"__esModule",{value:!0});const An=Cn(Tn);class Nn extends An.default{patternBetween(){return new RegExp("^\\s*(T|at|after|before|on|of|,|-)?\\s*$")}}yn.default=Nn;var Dn={},On={};Object.defineProperty(On,"__esModule",{value:!0});const En=new RegExp("^\\s*,?\\s*\\(?([A-Z]{2,4})\\)?(?=\\W|$)","i"),Rn={ACDT:630,ACST:570,ADT:-180,AEDT:660,AEST:600,AFT:270,AKDT:-480,AKST:-540,ALMT:360,AMST:-180,AMT:-240,ANAST:720,ANAT:720,AQTT:300,ART:-180,AST:-240,AWDT:540,AWST:480,AZOST:0,AZOT:-60,AZST:300,AZT:240,BNT:480,BOT:-240,BRST:-120,BRT:-180,BST:60,BTT:360,CAST:480,CAT:120,CCT:390,CDT:-300,CEST:120,CET:60,CHADT:825,CHAST:765,CKT:-600,CLST:-180,CLT:-240,COT:-300,CST:-360,CVT:-60,CXT:420,ChST:600,DAVT:420,EASST:-300,EAST:-360,EAT:180,ECT:-300,EDT:-240,EEST:180,EET:120,EGST:0,EGT:-60,EST:-300,ET:-300,FJST:780,FJT:720,FKST:-180,FKT:-240,FNT:-120,GALT:-360,GAMT:-540,GET:240,GFT:-180,GILT:720,GMT:0,GST:240,GYT:-240,HAA:-180,HAC:-300,HADT:-540,HAE:-240,HAP:-420,HAR:-360,HAST:-600,HAT:-90,HAY:-480,HKT:480,HLV:-210,HNA:-240,HNC:-360,HNE:-300,HNP:-480,HNR:-420,HNT:-150,HNY:-540,HOVT:420,ICT:420,IDT:180,IOT:360,IRDT:270,IRKST:540,IRKT:540,IRST:210,IST:330,JST:540,KGT:360,KRAST:480,KRAT:480,KST:540,KUYT:240,LHDT:660,LHST:630,LINT:840,MAGST:720,MAGT:720,MART:-510,MAWT:300,MDT:-360,MESZ:120,MEZ:60,MHT:720,MMT:390,MSD:240,MSK:240,MST:-420,MUT:240,MVT:300,MYT:480,NCT:660,NDT:-90,NFT:690,NOVST:420,NOVT:360,NPT:345,NST:-150,NUT:-660,NZDT:780,NZST:720,OMSST:420,OMST:420,PDT:-420,PET:-300,PETST:720,PETT:720,PGT:600,PHOT:780,PHT:480,PKT:300,PMDT:-120,PMST:-180,PONT:660,PST:-480,PT:-480,PWT:540,PYST:-180,PYT:-240,RET:240,SAMT:240,SAST:120,SBT:660,SCT:240,SGT:480,SRT:-180,SST:-660,TAHT:-600,TFT:300,TJT:300,TKT:780,TLT:540,TMT:300,TVT:720,ULAT:480,UTC:0,UYST:-120,UYT:-180,UZT:300,VET:-210,VLAST:660,VLAT:660,VUT:660,WAST:120,WAT:60,WEST:60,WESZ:60,WET:0,WEZ:0,WFT:720,WGST:-120,WGT:-180,WIB:420,WIT:540,WITA:480,WST:780,WT:0,YAKST:600,YAKT:600,YAPT:600,YEKST:360,YEKT:360};On.default=class{constructor(e){this.timezone=Object.assign(Object.assign({},Rn),e)}refine(e,t){var n;const r=null!==(n=e.option.timezones)&&void 0!==n?n:{};return t.forEach((t=>{var n,a;const s=e.text.substring(t.index+t.text.length),i=En.exec(s);if(!i)return;const o=i[1].toUpperCase(),u=null!==(a=null!==(n=r[o])&&void 0!==n?n:this.timezone[o])&&void 0!==a?a:null;if(null===u)return;e.debug((()=>{console.log(`Extracting timezone: '${o}' into : ${u}`)}));const d=t.start.get("timezoneOffset");if(null!==d&&u!=d){if(t.start.isCertain("timezoneOffset"))return;if(o!=i[1])return}t.start.isOnlyDate()&&o!=i[1]||(t.text+=i[0],t.start.isCertain("timezoneOffset")||t.start.assign("timezoneOffset",u),null==t.end||t.end.isCertain("timezoneOffset")||t.end.assign("timezoneOffset",u))})),t}};var xn={};Object.defineProperty(xn,"__esModule",{value:!0});const In=new RegExp("^\\s*(?:(?:GMT|UTC)\\s?)?([+-])(\\d{1,2})(?::?(\\d{2}))?","i");xn.default=class{refine(e,t){return t.forEach((function(t){if(t.start.isCertain("timezoneOffset"))return;const n=e.text.substring(t.index+t.text.length),r=In.exec(n);if(!r)return;e.debug((()=>{console.log(`Extracting timezone: '${r[0]}' into : ${t}`)}));let a=60*parseInt(r[2])+parseInt(r[3]||"0");"-"===r[1]&&(a=-a),null!=t.end&&t.end.assign("timezoneOffset",a),t.start.assign("timezoneOffset",a),t.text+=r[0]})),t}};var Sn={};Object.defineProperty(Sn,"__esModule",{value:!0});Sn.default=class{refine(e,t){if(t.length<2)return t;const n=[];let r=t[0];for(let e=1;e<t.length;e++){const a=t[e];a.index<r.index+r.text.length?a.text.length>r.text.length&&(r=a):(n.push(r),r=a)}return null!=r&&n.push(r),n}};var kn={},Wn=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(kn,"__esModule",{value:!0});const jn=Wn(Ie);kn.default=class{refine(e,t){return e.option.forwardDate?(t.forEach((function(t){let n=(0,jn.default)(e.refDate);if(t.start.isOnlyDayMonthComponent()&&n.isAfter(t.start.dayjs()))for(let r=0;r<3&&n.isAfter(t.start.dayjs());r++)t.start.imply("year",t.start.get("year")+1),e.debug((()=>{console.log(`Forward yearly adjusted for ${t} (${t.start})`)})),t.end&&!t.end.isCertain("year")&&(t.end.imply("year",t.end.get("year")+1),e.debug((()=>{console.log(`Forward yearly adjusted for ${t} (${t.end})`)})));t.start.isOnlyWeekdayComponent()&&n.isAfter(t.start.dayjs())&&(n=n.day()>=t.start.get("weekday")?n.day(t.start.get("weekday")+7):n.day(t.start.get("weekday")),t.start.imply("day",n.date()),t.start.imply("month",n.month()+1),t.start.imply("year",n.year()),e.debug((()=>{console.log(`Forward weekly adjusted for ${t} (${t.start})`)})),t.end&&t.end.isOnlyWeekdayComponent()&&(n=n.day()>t.end.get("weekday")?n.day(t.end.get("weekday")+7):n.day(t.end.get("weekday")),t.end.imply("day",n.date()),t.end.imply("month",n.month()+1),t.end.imply("year",n.year()),e.debug((()=>{console.log(`Forward weekly adjusted for ${t} (${t.end})`)}))))})),t):t}};var $n={};Object.defineProperty($n,"__esModule",{value:!0});const Yn=cn;class Fn extends Yn.Filter{constructor(e){super(),this.strictMode=e}isValid(e,t){return t.text.replace(" ","").match(/^\d*(\.\d*)?$/)?(e.debug((()=>{console.log(`Removing unlikely result '${t.text}'`)})),!1):t.start.isValidDate()?t.end&&!t.end.isValidDate()?(e.debug((()=>{console.log(`Removing invalid result: ${t} (${t.end})`)})),!1):!this.strictMode||this.isStrictModeValid(e,t):(e.debug((()=>{console.log(`Removing invalid result: ${t} (${t.start})`)})),!1)}isStrictModeValid(e,t){return t.start.isOnlyWeekdayComponent()?(e.debug((()=>{console.log(`(Strict) Removing weekday only component: ${t} (${t.end})`)})),!1):!!(!t.start.isOnlyTime()||t.start.isCertain("hour")&&t.start.isCertain("minute"))||(e.debug((()=>{console.log(`(Strict) Removing uncertain time component: ${t} (${t.end})`)})),!1)}}$n.default=Fn;var Bn={};Object.defineProperty(Bn,"__esModule",{value:!0});const Un=tt,Ln=new RegExp("([0-9]{4})\\-([0-9]{1,2})\\-([0-9]{1,2})(?:T([0-9]{1,2}):([0-9]{1,2})(?::([0-9]{1,2})(?:\\.(\\d{1,4}))?)?(?:Z|([+-]\\d{2}):?(\\d{2})?)?)?(?=\\W|$)","i");class Hn extends Un.AbstractParserWithWordBoundaryChecking{innerPattern(){return Ln}innerExtract(e,t){const n={};if(n.year=parseInt(t[1]),n.month=parseInt(t[2]),n.day=parseInt(t[3]),null!=t[4])if(n.hour=parseInt(t[4]),n.minute=parseInt(t[5]),null!=t[6]&&(n.second=parseInt(t[6])),null!=t[7]&&(n.millisecond=parseInt(t[7])),null==t[8])n.timezoneOffset=0;else{const e=parseInt(t[8]);let r=0;null!=t[9]&&(r=parseInt(t[9]));let a=60*e;a<0?a-=r:a+=r,n.timezoneOffset=a}return n}}Bn.default=Hn;var zn={};Object.defineProperty(zn,"__esModule",{value:!0});const Vn=cn;class Kn extends Vn.MergingRefiner{mergeResults(e,t,n){const r=n.clone();return r.index=t.index,r.text=t.text+e+r.text,r.start.assign("weekday",t.start.get("weekday")),r.end&&r.end.assign("weekday",t.start.get("weekday")),r}shouldMergeResults(e,t,n){return t.start.isOnlyWeekdayComponent()&&!t.start.isCertain("hour")&&n.start.isCertain("day")&&null!=e.match(/^,?\s*$/)}}zn.default=Kn;var Gn=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Dn,"__esModule",{value:!0}),Dn.includeCommonConfiguration=void 0;const qn=Gn(On),Zn=Gn(xn),Jn=Gn(Sn),Qn=Gn(kn),Xn=Gn($n),er=Gn(Bn),tr=Gn(zn);Dn.includeCommonConfiguration=function(e,t=!1){return e.parsers.unshift(new er.default),e.refiners.unshift(new tr.default),e.refiners.unshift(new qn.default),e.refiners.unshift(new Zn.default),e.refiners.unshift(new Jn.default),e.refiners.push(new Jn.default),e.refiners.push(new Qn.default),e.refiners.push(new Xn.default(t)),e};var nr={},rr={},ar=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(rr,"__esModule",{value:!0}),rr.tonight=rr.tomorrow=rr.yesterday=rr.today=rr.now=void 0;const sr=$e,ir=ar(Ie),or=Be,ur=X;rr.now=function(e){const t=(0,ir.default)(e.instant),n=new sr.ParsingComponents(e,{});return(0,or.assignSimilarDate)(n,t),(0,or.assignSimilarTime)(n,t),null!==e.timezoneOffset&&n.assign("timezoneOffset",t.utcOffset()),n},rr.today=function(e){const t=(0,ir.default)(e.instant),n=new sr.ParsingComponents(e,{});return(0,or.assignSimilarDate)(n,t),(0,or.implySimilarTime)(n,t),n},rr.yesterday=function(e){let t=(0,ir.default)(e.instant);const n=new sr.ParsingComponents(e,{});return t=t.add(-1,"day"),(0,or.assignSimilarDate)(n,t),(0,or.implySimilarTime)(n,t),n},rr.tomorrow=function(e){const t=(0,ir.default)(e.instant),n=new sr.ParsingComponents(e,{});return(0,or.assignTheNextDay)(n,t),n},rr.tonight=function(e,t=22){const n=(0,ir.default)(e.instant),r=new sr.ParsingComponents(e,{});return r.imply("hour",t),r.imply("meridiem",ur.Meridiem.PM),(0,or.assignSimilarDate)(r,n),r};var dr=a&&a.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),lr=a&&a.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),cr=a&&a.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&dr(t,e,n);return lr(t,e),t},mr=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(nr,"__esModule",{value:!0});const fr=mr(Ie),hr=tt,pr=Be,gr=cr(rr),yr=/(now|today|tonight|tomorrow|tmr|tmrw|yesterday|last\s*night)(?=\W|$)/i;class Tr extends hr.AbstractParserWithWordBoundaryChecking{innerPattern(e){return yr}innerExtract(e,t){let n=(0,fr.default)(e.refDate);const r=t[0].toLowerCase(),a=e.createParsingComponents();switch(r){case"now":return gr.now(e.reference);case"today":return gr.today(e.reference);case"yesterday":return gr.yesterday(e.reference);case"tomorrow":case"tmr":case"tmrw":return gr.tomorrow(e.reference);case"tonight":return gr.tonight(e.reference);default:r.match(/last\s*night/)&&(n.hour()>6&&(n=n.add(-1,"day")),(0,pr.assignSimilarDate)(a,n),a.imply("hour",0))}return a}}nr.default=Tr;var _r={},wr=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(_r,"__esModule",{value:!0});const Mr=X,Pr=tt,vr=wr(Ie),br=Be,Cr=/(?:this)?\s{0,3}(morning|afternoon|evening|night|midnight|noon)(?=\W|$)/i;class Ar extends Pr.AbstractParserWithWordBoundaryChecking{innerPattern(){return Cr}innerExtract(e,t){const n=(0,vr.default)(e.refDate),r=e.createParsingComponents();switch(t[1].toLowerCase()){case"afternoon":r.imply("meridiem",Mr.Meridiem.PM),r.imply("hour",15);break;case"evening":case"night":r.imply("meridiem",Mr.Meridiem.PM),r.imply("hour",20);break;case"midnight":(0,br.assignTheNextDay)(r,n),r.imply("hour",0),r.imply("minute",0),r.imply("second",0);break;case"morning":r.imply("meridiem",Mr.Meridiem.AM),r.imply("hour",6);break;case"noon":r.imply("meridiem",Mr.Meridiem.AM),r.imply("hour",12)}return r}}_r.default=Ar;var Nr={},Dr={},Or=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Dr,"__esModule",{value:!0}),Dr.toDayJSClosestWeekday=Dr.toDayJSWeekday=void 0;const Er=Or(Ie);function Rr(e,t,n){var r;let a=(0,Er.default)(e).locale("en",n);const s=a.weekday(),i=(7+t-(null!==(r=null==n?void 0:n.weekStart)&&void 0!==r?r:0))%7;return a=Math.abs(i-7-s)<Math.abs(i-s)?a.weekday(i-7):Math.abs(i+7-s)<Math.abs(i-s)?a.weekday(i+7):a.weekday(i),a}Dr.toDayJSWeekday=function(e,t,n,r){var a;if(!n)return Rr(e,t,r);let s=(0,Er.default)(e).locale("en",r);const i=(7+t-(null!==(a=null==r?void 0:r.weekStart)&&void 0!==a?a:0))%7;switch(n){case"this":s=s.weekday(i);break;case"next":s=s.weekday(i+7);break;case"last":s=s.weekday(i-7)}return s},Dr.toDayJSClosestWeekday=Rr,Object.defineProperty(Nr,"__esModule",{value:!0});const xr=ne,Ir=tt,Sr=Dr,kr=new RegExp(`(?:(?:\\,|\\(|\\（)\\s*)?(?:on\\s*?)?(?:(this|last|past|next)\\s*)?(${(0,re.matchAnyPattern)(xr.WEEKDAY_DICTIONARY)})(?:\\s*(?:\\,|\\)|\\）))?(?:\\s*(this|last|past|next)\\s*week)?(?=\\W|$)`,"i");class Wr extends Ir.AbstractParserWithWordBoundaryChecking{innerPattern(){return kr}innerExtract(e,t){const n=t[2].toLowerCase(),r=xr.WEEKDAY_DICTIONARY[n],a=t[1],s=t[3];let i=a||s;i=i||"",i=i.toLowerCase();let o=null;"last"==i||"past"==i?o="last":"next"==i?o="next":"this"==i&&(o="this");const u=(0,Sr.toDayJSWeekday)(e.refDate,r,o,e.option.locale);return e.createParsingComponents().assign("weekday",r).imply("day",u.date()).imply("month",u.month()+1).imply("year",u.year())}}Nr.default=Wr;var jr={},$r=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(jr,"__esModule",{value:!0});const Yr=ne,Fr=$e,Br=$r(Ie),Ur=tt,Lr=new RegExp(`(this|next|last|past)\\s*(${(0,re.matchAnyPattern)(Yr.TIME_UNIT_DICTIONARY)})(?=\\s*)(?=\\W|$)`,"i");class Hr extends Ur.AbstractParserWithWordBoundaryChecking{innerPattern(){return Lr}innerExtract(e,t){const n=t[1].toLowerCase(),r=t[2].toLowerCase(),a=Yr.TIME_UNIT_DICTIONARY[r];if("next"==n){const t={};return t[a]=1,Fr.ParsingComponents.createRelativeFromReference(e.reference,t)}if("last"==n||"past"==n){const t={};return t[a]=-1,Fr.ParsingComponents.createRelativeFromReference(e.reference,t)}const s=e.createParsingComponents();let i=(0,Br.default)(e.reference.instant);return r.match(/week/i)?(i=i.add(-i.get("d"),"d"),s.imply("day",i.date()),s.imply("month",i.month()+1),s.imply("year",i.year())):r.match(/month/i)?(i=i.add(1-i.date(),"d"),s.imply("day",i.date()),s.assign("year",i.year()),s.assign("month",i.month()+1)):r.match(/year/i)&&(i=i.add(1-i.date(),"d"),i=i.add(-i.month(),"month"),s.imply("day",i.date()),s.imply("month",i.month()+1),s.assign("year",i.year())),s}}jr.default=Hr;var zr={};Object.defineProperty(zr,"__esModule",{value:!0}),zr.ParsingContext=zr.Chrono=void 0;const Vr=$e,Kr=ee;class Gr{constructor(e){e=e||(0,Kr.createCasualConfiguration)(),this.parsers=[...e.parsers],this.refiners=[...e.refiners]}clone(){return new Gr({parsers:[...this.parsers],refiners:[...this.refiners]})}parseDate(e,t,n){const r=this.parse(e,t,n);return r.length>0?r[0].start.date():null}parse(e,t,n){const r=new qr(e,t,n);let a=[];return this.parsers.forEach((e=>{const t=Gr.executeParser(r,e);a=a.concat(t)})),a.sort(((e,t)=>e.index-t.index)),this.refiners.forEach((function(e){a=e.refine(r,a)})),a}static executeParser(e,t){const n=[],r=t.pattern(e),a=e.text;let s=e.text,i=r.exec(s);for(;i;){const o=i.index+a.length-s.length;i.index=o;const u=t.extract(e,i);if(!u){s=a.substring(i.index+1),i=r.exec(s);continue}let d=null;u instanceof Vr.ParsingResult?d=u:u instanceof Vr.ParsingComponents?(d=e.createParsingResult(i.index,i[0]),d.start=u):d=e.createParsingResult(i.index,i[0],u),e.debug((()=>console.log(`${t.constructor.name} extracted result ${d}`))),n.push(d),s=a.substring(o+d.text.length),i=r.exec(s)}return n}}zr.Chrono=Gr;class qr{constructor(e,t,n){this.text=e,this.reference=new Vr.ReferenceWithTimezone(t),this.option=null!=n?n:{},this.refDate=this.reference.instant}createParsingComponents(e){return e instanceof Vr.ParsingComponents?e:new Vr.ParsingComponents(this.reference,e)}createParsingResult(e,t,n,r){const a="string"==typeof t?t:this.text.substring(e,t),s=n?this.createParsingComponents(n):null,i=r?this.createParsingComponents(r):null;return new Vr.ParsingResult(this.reference,e,a,s,i)}debug(e){if(this.option.debug)if(this.option.debug instanceof Function)this.option.debug(e);else{this.option.debug.debug(e)}}}zr.ParsingContext=qr;var Zr={};Object.defineProperty(Zr,"__esModule",{value:!0});const Jr=se,Qr=new RegExp("([^\\d]|^)([0-3]{0,1}[0-9]{1})[\\/\\.\\-]([0-3]{0,1}[0-9]{1})(?:[\\/\\.\\-]([0-9]{4}|[0-9]{2}))?(\\W|$)","i");Zr.default=class{constructor(e){this.groupNumberMonth=e?3:2,this.groupNumberDay=e?2:3}pattern(){return Qr}extract(e,t){if("/"==t[1]||"/"==t[5])return void(t.index+=t[0].length);const n=t.index+t[1].length,r=t[0].substr(t[1].length,t[0].length-t[1].length-t[5].length);if(r.match(/^\d\.\d$/)||r.match(/^\d\.\d{1,2}\.\d{1,2}\s*$/))return;if(!t[4]&&t[0].indexOf("/")<0)return;const a=e.createParsingResult(n,r);let s=parseInt(t[this.groupNumberMonth]),i=parseInt(t[this.groupNumberDay]);if((s<1||s>12)&&s>12){if(!(i>=1&&i<=12&&s<=31))return null;[i,s]=[s,i]}if(i<1||i>31)return null;if(a.start.assign("day",i),a.start.assign("month",s),t[4]){const e=parseInt(t[4]),n=(0,Jr.findMostLikelyADYear)(e);a.start.assign("year",n)}else{const t=(0,Jr.findYearClosestToRef)(e.refDate,i,s);a.start.imply("year",t)}return a}};var Xr={};Object.defineProperty(Xr,"__esModule",{value:!0});const ea=ne,ta=$e,na=tt,ra=Kt,aa=new RegExp(`(this|last|past|next|\\+|-)\\s*(${ea.TIME_UNITS_PATTERN})(?=\\W|$)`,"i");class sa extends na.AbstractParserWithWordBoundaryChecking{innerPattern(){return aa}innerExtract(e,t){const n=t[1].toLowerCase();let r=(0,ea.parseTimeUnits)(t[2]);switch(n){case"last":case"past":case"-":r=(0,ra.reverseTimeUnits)(r)}return ta.ParsingComponents.createRelativeFromReference(e.reference,r)}}Xr.default=sa,function(e){var t=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(e,"__esModule",{value:!0}),e.createConfiguration=e.createCasualConfiguration=e.parseDate=e.parse=e.GB=e.strict=e.casual=void 0;const n=t(te),r=t(ut),s=t(gt),i=t(bt),o=t(Rt),u=t(Wt),d=t(Ft),l=t(Vt),c=t(tn),m=t(dn),f=t(yn),h=Dn,p=t(nr),g=t(_r),y=t(Nr),T=t(jr),_=zr,w=t(Zr),M=t(Xr);function P(e=!1){const t=v(!1,e);return t.parsers.unshift(new p.default),t.parsers.unshift(new g.default),t.parsers.unshift(new i.default),t.parsers.unshift(new T.default),t.parsers.unshift(new M.default),t}function v(e=!0,t=!1){return(0,h.includeCommonConfiguration)({parsers:[new w.default(t),new n.default,new r.default,new s.default,new y.default,new o.default,new u.default,new d.default(e),new l.default(e),new c.default(e)],refiners:[new f.default,new m.default]},e)}e.casual=new _.Chrono(P(!1)),e.strict=new _.Chrono(v(!0,!1)),e.GB=new _.Chrono(v(!1,!0)),e.parse=function(t,n,r){return e.casual.parse(t,n,r)},e.parseDate=function(t,n,r){return e.casual.parseDate(t,n,r)},e.createCasualConfiguration=P,e.createConfiguration=v}(ee);var ia={},oa={};Object.defineProperty(oa,"__esModule",{value:!0});const ua=Bt,da=X;class la extends ua.AbstractTimeExpressionParser{primaryPrefix(){return"(?:(?:um|von)\\s*)?"}followingPhase(){return"\\s*(?:\\-|\\–|\\~|\\〜|bis)\\s*"}primarySuffix(){return"(?:\\s*uhr)?(?:\\s*(?:morgens|vormittags|nachmittags|abends|nachts))?(?=\\W|$)"}extractPrimaryTimeComponents(e,t){const n=super.extractPrimaryTimeComponents(e,t);if(n){if(t[0].endsWith("morgens")||t[0].endsWith("vormittags")){n.assign("meridiem",da.Meridiem.AM);n.get("hour")<12&&n.assign("hour",n.get("hour"))}if(t[0].endsWith("nachmittags")||t[0].endsWith("abends")||t[0].endsWith("nachts")){n.assign("meridiem",da.Meridiem.PM);n.get("hour")<12&&n.assign("hour",n.get("hour")+12)}}return n}}oa.default=la;var ca={},ma={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.parseTimeUnits=e.TIME_UNITS_PATTERN=e.parseYear=e.YEAR_PATTERN=e.parseNumberPattern=e.NUMBER_PATTERN=e.TIME_UNIT_DICTIONARY=e.INTEGER_WORD_DICTIONARY=e.MONTH_DICTIONARY=e.WEEKDAY_DICTIONARY=void 0;const t=re,n=se;function r(t){const n=t.toLowerCase();return void 0!==e.INTEGER_WORD_DICTIONARY[n]?e.INTEGER_WORD_DICTIONARY[n]:"a"===n||"an"===n?1:n.match(/few/)?3:n.match(/half/)?.5:n.match(/couple/)?2:n.match(/several/)?7:parseFloat(n)}e.WEEKDAY_DICTIONARY={sonntag:0,so:0,montag:1,mo:1,dienstag:2,di:2,mittwoch:3,mi:3,donnerstag:4,do:4,freitag:5,fr:5,samstag:6,sa:6},e.MONTH_DICTIONARY={januar:1,jan:1,"jan.":1,februar:2,feb:2,"feb.":2,"märz":3,maerz:3,"mär":3,"mär.":3,mrz:3,"mrz.":3,april:4,apr:4,"apr.":4,mai:5,juni:6,jun:6,"jun.":6,juli:7,jul:7,"jul.":7,august:8,aug:8,"aug.":8,september:9,sep:9,"sep.":9,sept:9,"sept.":9,oktober:10,okt:10,"okt.":10,november:11,nov:11,"nov.":11,dezember:12,dez:12,"dez.":12},e.INTEGER_WORD_DICTIONARY={eins:1,zwei:2,drei:3,vier:4,"fünf":5,fuenf:5,sechs:6,sieben:7,acht:8,neun:9,zehn:10,elf:11,"zwölf":12,zwoelf:12},e.TIME_UNIT_DICTIONARY={sec:"second",second:"second",seconds:"second",min:"minute",mins:"minute",minute:"minute",minutes:"minute",h:"hour",hr:"hour",hrs:"hour",hour:"hour",hours:"hour",day:"d",days:"d",week:"week",weeks:"week",month:"month",months:"month",y:"year",yr:"year",year:"year",years:"year"},e.NUMBER_PATTERN=`(?:${(0,t.matchAnyPattern)(e.INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+\\.[0-9]+|half(?:\\s*an?)?|an?\\b(?:\\s*few)?|few|several|a?\\s*couple\\s*(?:of)?)`,e.parseNumberPattern=r,e.YEAR_PATTERN="(?:[0-9]{1,4}(?:\\s*[vn]\\.?\\s*C(?:hr)?\\.?)?)",e.parseYear=function(e){if(/v/i.test(e))return-parseInt(e.replace(/[^0-9]+/gi,""));if(/n/i.test(e))return parseInt(e.replace(/[^0-9]+/gi,""));const t=parseInt(e);return(0,n.findMostLikelyADYear)(t)};const a=`(${e.NUMBER_PATTERN})\\s{0,5}(${(0,t.matchAnyPattern)(e.TIME_UNIT_DICTIONARY)})\\s{0,5}`,s=new RegExp(a,"i");function i(t,n){const a=r(n[1]);t[e.TIME_UNIT_DICTIONARY[n[2].toLowerCase()]]=a}e.TIME_UNITS_PATTERN=(0,t.repeatedTimeunitPattern)("",a),e.parseTimeUnits=function(e){const t={};let n=e,r=s.exec(n);for(;r;)i(t,r),n=n.substring(r[0].length),r=s.exec(n);return t}}(ma),Object.defineProperty(ca,"__esModule",{value:!0});const fa=ma,ha=tt,pa=Dr,ga=new RegExp(`(?:(?:\\,|\\(|\\（)\\s*)?(?:a[mn]\\s*?)?(?:(diese[mn]|letzte[mn]|n(?:ä|ae)chste[mn])\\s*)?(${(0,re.matchAnyPattern)(fa.WEEKDAY_DICTIONARY)})(?:\\s*(?:\\,|\\)|\\）))?(?:\\s*(diese|letzte|n(?:ä|ae)chste)\\s*woche)?(?=\\W|$)`,"i");class ya extends ha.AbstractParserWithWordBoundaryChecking{innerPattern(){return ga}innerExtract(e,t){const n=t[2].toLowerCase(),r=fa.WEEKDAY_DICTIONARY[n],a=t[1],s=t[3];let i=a||s;i=i||"",i=i.toLowerCase();let o=null;i.match(/letzte/)?o="last":i.match(/chste/)?o="next":i.match(/diese/)&&(o="this");const u=(0,pa.toDayJSWeekday)(e.refDate,r,o);return e.createParsingComponents().assign("weekday",r).imply("day",u.date()).imply("month",u.month()+1).imply("year",u.year())}}ca.default=ya;var Ta={},_a=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Ta,"__esModule",{value:!0});const wa=_a(ln);class Ma extends wa.default{patternBetween(){return/^\s*(bis(?:\s*(?:am|zum))?|-)\s*$/i}}Ta.default=Ma;var Pa={},va=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Pa,"__esModule",{value:!0});const ba=va(Tn);class Ca extends ba.default{patternBetween(){return new RegExp("^\\s*(T|um|am|,|-)?\\s*$")}}Pa.default=Ca;var Aa={},Na={},Da=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Na,"__esModule",{value:!0});const Oa=Da(Ie),Ea=X,Ra=tt,xa=Be,Ia=Kt;class Sa extends Ra.AbstractParserWithWordBoundaryChecking{innerPattern(e){return/(diesen)?\s*(morgen|vormittag|mittags?|nachmittag|abend|nacht|mitternacht)(?=\W|$)/i}innerExtract(e,t){const n=(0,Oa.default)(e.refDate),r=t[2].toLowerCase(),a=e.createParsingComponents();return(0,xa.implySimilarTime)(a,n),Sa.extractTimeComponents(a,r)}static extractTimeComponents(e,t){switch(t){case"morgen":e.imply("hour",6),e.imply("minute",0),e.imply("second",0),e.imply("meridiem",Ea.Meridiem.AM);break;case"vormittag":e.imply("hour",9),e.imply("minute",0),e.imply("second",0),e.imply("meridiem",Ea.Meridiem.AM);break;case"mittag":case"mittags":e.imply("hour",12),e.imply("minute",0),e.imply("second",0),e.imply("meridiem",Ea.Meridiem.AM);break;case"nachmittag":e.imply("hour",15),e.imply("minute",0),e.imply("second",0),e.imply("meridiem",Ea.Meridiem.PM);break;case"abend":e.imply("hour",18),e.imply("minute",0),e.imply("second",0),e.imply("meridiem",Ea.Meridiem.PM);break;case"nacht":e.imply("hour",22),e.imply("minute",0),e.imply("second",0),e.imply("meridiem",Ea.Meridiem.PM);break;case"mitternacht":e.get("hour")>1&&(e=(0,Ia.addImpliedTimeUnits)(e,{day:1})),e.imply("hour",0),e.imply("minute",0),e.imply("second",0),e.imply("meridiem",Ea.Meridiem.AM)}return e}}Na.default=Sa;var ka=a&&a.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),Wa=a&&a.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),ja=a&&a.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&ka(t,e,n);return Wa(t,e),t},$a=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Aa,"__esModule",{value:!0});const Ya=$a(Ie),Fa=tt,Ba=Be,Ua=$a(Na),La=ja(rr),Ha=new RegExp("(jetzt|heute|morgen|übermorgen|uebermorgen|gestern|vorgestern|letzte\\s*nacht)(?:\\s*(morgen|vormittag|mittags?|nachmittag|abend|nacht|mitternacht))?(?=\\W|$)","i");class za extends Fa.AbstractParserWithWordBoundaryChecking{innerPattern(e){return Ha}innerExtract(e,t){let n=(0,Ya.default)(e.refDate);const r=(t[1]||"").toLowerCase(),a=(t[2]||"").toLowerCase();let s=e.createParsingComponents();switch(r){case"jetzt":s=La.now(e.reference);break;case"heute":s=La.today(e.reference);break;case"morgen":(0,Ba.assignTheNextDay)(s,n);break;case"übermorgen":case"uebermorgen":n=n.add(1,"day"),(0,Ba.assignTheNextDay)(s,n);break;case"gestern":n=n.add(-1,"day"),(0,Ba.assignSimilarDate)(s,n),(0,Ba.implySimilarTime)(s,n);break;case"vorgestern":n=n.add(-2,"day"),(0,Ba.assignSimilarDate)(s,n),(0,Ba.implySimilarTime)(s,n);break;default:r.match(/letzte\s*nacht/)&&(n.hour()>6&&(n=n.add(-1,"day")),(0,Ba.assignSimilarDate)(s,n),s.imply("hour",0))}return a&&(s=Ua.default.extractTimeComponents(s,a)),s}}Aa.default=za;var Va={};Object.defineProperty(Va,"__esModule",{value:!0});const Ka=se,Ga=ma,qa=ma,Za=tt,Ja=new RegExp(`(?:am\\s*?)?(?:den\\s*?)?([0-9]{1,2})\\.(?:\\s*(?:bis(?:\\s*(?:am|zum))?|\\-|\\–|\\s)\\s*([0-9]{1,2})\\.?)?\\s*(${(0,re.matchAnyPattern)(Ga.MONTH_DICTIONARY)})(?:(?:-|/|,?\\s*)(${qa.YEAR_PATTERN}(?![^\\s]\\d)))?(?=\\W|$)`,"i");class Qa extends Za.AbstractParserWithWordBoundaryChecking{innerPattern(){return Ja}innerExtract(e,t){const n=e.createParsingResult(t.index,t[0]),r=Ga.MONTH_DICTIONARY[t[3].toLowerCase()],a=parseInt(t[1]);if(a>31)return t.index=t.index+t[1].length,null;if(n.start.assign("month",r),n.start.assign("day",a),t[4]){const e=(0,qa.parseYear)(t[4]);n.start.assign("year",e)}else{const t=(0,Ka.findYearClosestToRef)(e.refDate,a,r);n.start.imply("year",t)}if(t[2]){const e=parseInt(t[2]);n.end=n.start.clone(),n.end.assign("day",e)}return n}}Va.default=Qa,function(e){var t=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(e,"__esModule",{value:!0}),e.createConfiguration=e.createCasualConfiguration=e.parseDate=e.parse=e.strict=e.casual=void 0;const n=Dn,r=zr,s=t(Zr),i=t(Bn),o=t(oa),u=t(ca),d=t(Ta),l=t(Pa),c=t(Aa),m=t(Na),f=t(Va);function h(e=!0){const t=p(!1,e);return t.parsers.unshift(new m.default),t.parsers.unshift(new c.default),t}function p(e=!0,t=!0){return(0,n.includeCommonConfiguration)({parsers:[new i.default,new s.default(t),new o.default,new f.default,new u.default],refiners:[new d.default,new l.default]},e)}e.casual=new r.Chrono(h()),e.strict=new r.Chrono(p(!0)),e.parse=function(t,n,r){return e.casual.parse(t,n,r)},e.parseDate=function(t,n,r){return e.casual.parseDate(t,n,r)},e.createCasualConfiguration=h,e.createConfiguration=p}(ia);var Xa={},es={},ts=a&&a.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),ns=a&&a.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),rs=a&&a.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&ts(t,e,n);return ns(t,e),t},as=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(es,"__esModule",{value:!0});const ss=as(Ie),is=X,os=tt,us=Be,ds=rs(rr);class ls extends os.AbstractParserWithWordBoundaryChecking{innerPattern(e){return/(maintenant|aujourd'hui|demain|hier|cette\s*nuit|la\s*veille)(?=\W|$)/i}innerExtract(e,t){let n=(0,ss.default)(e.refDate);const r=t[0].toLowerCase(),a=e.createParsingComponents();switch(r){case"maintenant":return ds.now(e.reference);case"aujourd'hui":return ds.today(e.reference);case"hier":return ds.yesterday(e.reference);case"demain":return ds.tomorrow(e.reference);default:r.match(/cette\s*nuit/)?((0,us.assignSimilarDate)(a,n),a.imply("hour",22),a.imply("meridiem",is.Meridiem.PM)):r.match(/la\s*veille/)&&(n=n.add(-1,"day"),(0,us.assignSimilarDate)(a,n),a.imply("hour",0))}return a}}es.default=ls;var cs={};Object.defineProperty(cs,"__esModule",{value:!0});const ms=X,fs=tt;class hs extends fs.AbstractParserWithWordBoundaryChecking{innerPattern(e){return/(cet?)?\s*(matin|soir|après-midi|aprem|a midi|à minuit)(?=\W|$)/i}innerExtract(e,t){const n=t[2].toLowerCase(),r=e.createParsingComponents();switch(n){case"après-midi":case"aprem":r.imply("hour",14),r.imply("minute",0),r.imply("meridiem",ms.Meridiem.PM);break;case"soir":r.imply("hour",18),r.imply("minute",0),r.imply("meridiem",ms.Meridiem.PM);break;case"matin":r.imply("hour",8),r.imply("minute",0),r.imply("meridiem",ms.Meridiem.AM);break;case"a midi":r.imply("hour",12),r.imply("minute",0),r.imply("meridiem",ms.Meridiem.AM);break;case"à minuit":r.imply("hour",0),r.imply("meridiem",ms.Meridiem.AM)}return r}}cs.default=hs;var ps={};Object.defineProperty(ps,"__esModule",{value:!0});const gs=Bt;class ys extends gs.AbstractTimeExpressionParser{primaryPrefix(){return"(?:(?:[àa])\\s*)?"}followingPhase(){return"\\s*(?:\\-|\\–|\\~|\\〜|[àa]|\\?)\\s*"}extractPrimaryTimeComponents(e,t){return t[0].match(/^\s*\d{4}\s*$/)?null:super.extractPrimaryTimeComponents(e,t)}}ps.default=ys;var Ts={},_s=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Ts,"__esModule",{value:!0});const ws=_s(Tn);class Ms extends ws.default{patternBetween(){return new RegExp("^\\s*(T|à|a|vers|de|,|-)?\\s*$")}}Ts.default=Ms;var Ps={},vs=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Ps,"__esModule",{value:!0});const bs=vs(ln);class Cs extends bs.default{patternBetween(){return/^\s*(à|a|-)\s*$/i}}Ps.default=Cs;var As={},Ns={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.parseTimeUnits=e.TIME_UNITS_PATTERN=e.parseYear=e.YEAR_PATTERN=e.parseOrdinalNumberPattern=e.ORDINAL_NUMBER_PATTERN=e.parseNumberPattern=e.NUMBER_PATTERN=e.TIME_UNIT_DICTIONARY=e.INTEGER_WORD_DICTIONARY=e.MONTH_DICTIONARY=e.WEEKDAY_DICTIONARY=void 0;const t=re;function n(t){const n=t.toLowerCase();return void 0!==e.INTEGER_WORD_DICTIONARY[n]?e.INTEGER_WORD_DICTIONARY[n]:"une"===n||"un"===n?1:n.match(/quelques?/)?3:n.match(/demi-?/)?.5:parseFloat(n)}e.WEEKDAY_DICTIONARY={dimanche:0,dim:0,lundi:1,lun:1,mardi:2,mar:2,mercredi:3,mer:3,jeudi:4,jeu:4,vendredi:5,ven:5,samedi:6,sam:6},e.MONTH_DICTIONARY={janvier:1,jan:1,"jan.":1,"février":2,"fév":2,"fév.":2,fevrier:2,fev:2,"fev.":2,mars:3,mar:3,"mar.":3,avril:4,avr:4,"avr.":4,mai:5,juin:6,jun:6,juillet:7,juil:7,jul:7,"jul.":7,"août":8,aout:8,septembre:9,sep:9,"sep.":9,sept:9,"sept.":9,octobre:10,oct:10,"oct.":10,novembre:11,nov:11,"nov.":11,"décembre":12,decembre:12,dec:12,"dec.":12},e.INTEGER_WORD_DICTIONARY={un:1,deux:2,trois:3,quatre:4,cinq:5,six:6,sept:7,huit:8,neuf:9,dix:10,onze:11,douze:12,treize:13},e.TIME_UNIT_DICTIONARY={sec:"second",seconde:"second",secondes:"second",min:"minute",mins:"minute",minute:"minute",minutes:"minute",h:"hour",hr:"hour",hrs:"hour",heure:"hour",heures:"hour",jour:"d",jours:"d",semaine:"week",semaines:"week",mois:"month",trimestre:"quarter",trimestres:"quarter",ans:"year","année":"year","années":"year"},e.NUMBER_PATTERN=`(?:${(0,t.matchAnyPattern)(e.INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+\\.[0-9]+|une?\\b|quelques?|demi-?)`,e.parseNumberPattern=n,e.ORDINAL_NUMBER_PATTERN="(?:[0-9]{1,2}(?:er)?)",e.parseOrdinalNumberPattern=function(e){let t=e.toLowerCase();return t=t.replace(/(?:er)$/i,""),parseInt(t)},e.YEAR_PATTERN="(?:[1-9][0-9]{0,3}\\s*(?:AC|AD|p\\.\\s*C(?:hr?)?\\.\\s*n\\.)|[1-2][0-9]{3}|[5-9][0-9])",e.parseYear=function(e){if(/AC/i.test(e))return e=e.replace(/BC/i,""),-parseInt(e);if(/AD/i.test(e)||/C/i.test(e))return e=e.replace(/[^\d]+/i,""),parseInt(e);let t=parseInt(e);return t<100&&(t+=t>50?1900:2e3),t};const r=`(${e.NUMBER_PATTERN})\\s{0,5}(${(0,t.matchAnyPattern)(e.TIME_UNIT_DICTIONARY)})\\s{0,5}`,a=new RegExp(r,"i");function s(t,r){const a=n(r[1]);t[e.TIME_UNIT_DICTIONARY[r[2].toLowerCase()]]=a}e.TIME_UNITS_PATTERN=(0,t.repeatedTimeunitPattern)("",r),e.parseTimeUnits=function(e){const t={};let n=e,r=a.exec(n);for(;r;)s(t,r),n=n.substring(r[0].length),r=a.exec(n);return t}}(Ns),Object.defineProperty(As,"__esModule",{value:!0});const Ds=Ns,Os=tt,Es=Dr,Rs=new RegExp(`(?:(?:\\,|\\(|\\（)\\s*)?(?:(?:ce)\\s*)?(${(0,re.matchAnyPattern)(Ds.WEEKDAY_DICTIONARY)})(?:\\s*(?:\\,|\\)|\\）))?(?:\\s*(dernier|prochain)\\s*)?(?=\\W|\\d|$)`,"i");class xs extends Os.AbstractParserWithWordBoundaryChecking{innerPattern(){return Rs}innerExtract(e,t){const n=t[1].toLowerCase(),r=Ds.WEEKDAY_DICTIONARY[n];if(void 0===r)return null;let a=t[2];a=a||"",a=a.toLowerCase();let s=null;"dernier"==a?s="last":"prochain"==a&&(s="next");const i=(0,Es.toDayJSWeekday)(e.refDate,r,s);return e.createParsingComponents().assign("weekday",r).imply("day",i.date()).imply("month",i.month()+1).imply("year",i.year())}}As.default=xs;var Is={};Object.defineProperty(Is,"__esModule",{value:!0});const Ss=X,ks=new RegExp("(^|\\s|T)(?:(?:[àa])\\s*)?(\\d{1,2})(?:h|:)?(?:(\\d{1,2})(?:m|:)?)?(?:(\\d{1,2})(?:s|:)?)?(?:\\s*(A\\.M\\.|P\\.M\\.|AM?|PM?))?(?=\\W|$)","i"),Ws=new RegExp("^\\s*(\\-|\\–|\\~|\\〜|[àa]|\\?)\\s*(\\d{1,2})(?:h|:)?(?:(\\d{1,2})(?:m|:)?)?(?:(\\d{1,2})(?:s|:)?)?(?:\\s*(A\\.M\\.|P\\.M\\.|AM?|PM?))?(?=\\W|$)","i");class js{pattern(e){return ks}extract(e,t){const n=e.createParsingResult(t.index+t[1].length,t[0].substring(t[1].length));if(n.text.match(/^\d{4}$/))return t.index+=t[0].length,null;if(n.start=js.extractTimeComponent(n.start.clone(),t),!n.start)return t.index+=t[0].length,null;const r=e.text.substring(t.index+t[0].length),a=Ws.exec(r);return a&&(n.end=js.extractTimeComponent(n.start.clone(),a),n.end&&(n.text+=a[0])),n}static extractTimeComponent(e,t){let n=0,r=0,a=null;if(n=parseInt(t[2]),null!=t[3]&&(r=parseInt(t[3])),r>=60||n>24)return null;if(n>=12&&(a=Ss.Meridiem.PM),null!=t[5]){if(n>12)return null;const e=t[5][0].toLowerCase();"a"==e&&(a=Ss.Meridiem.AM,12==n&&(n=0)),"p"==e&&(a=Ss.Meridiem.PM,12!=n&&(n+=12))}if(e.assign("hour",n),e.assign("minute",r),null!==a?e.assign("meridiem",a):n<12?e.imply("meridiem",Ss.Meridiem.AM):e.imply("meridiem",Ss.Meridiem.PM),null!=t[4]){const n=parseInt(t[4]);if(n>=60)return null;e.assign("second",n)}return e}}Is.default=js;var $s={};Object.defineProperty($s,"__esModule",{value:!0});const Ys=se,Fs=Ns,Bs=Ns,Us=Ns,Ls=tt,Hs=new RegExp(`(?:on\\s*?)?(${Us.ORDINAL_NUMBER_PATTERN})(?:\\s*(?:au|\\-|\\–|jusqu'au?|\\s)\\s*(${Us.ORDINAL_NUMBER_PATTERN}))?(?:-|/|\\s*(?:de)?\\s*)(${(0,re.matchAnyPattern)(Fs.MONTH_DICTIONARY)})(?:(?:-|/|,?\\s*)(${Bs.YEAR_PATTERN}(?![^\\s]\\d)))?(?=\\W|$)`,"i");class zs extends Ls.AbstractParserWithWordBoundaryChecking{innerPattern(){return Hs}innerExtract(e,t){const n=e.createParsingResult(t.index,t[0]),r=Fs.MONTH_DICTIONARY[t[3].toLowerCase()],a=(0,Us.parseOrdinalNumberPattern)(t[1]);if(a>31)return t.index=t.index+t[1].length,null;if(n.start.assign("month",r),n.start.assign("day",a),t[4]){const e=(0,Bs.parseYear)(t[4]);n.start.assign("year",e)}else{const t=(0,Ys.findYearClosestToRef)(e.refDate,a,r);n.start.imply("year",t)}if(t[2]){const e=(0,Us.parseOrdinalNumberPattern)(t[2]);n.end=n.start.clone(),n.end.assign("day",e)}return n}}$s.default=zs;var Vs={};Object.defineProperty(Vs,"__esModule",{value:!0});const Ks=Ns,Gs=$e,qs=tt,Zs=Kt;class Js extends qs.AbstractParserWithWordBoundaryChecking{constructor(){super()}innerPattern(){return new RegExp(`il y a\\s*(${Ks.TIME_UNITS_PATTERN})(?=(?:\\W|$))`,"i")}innerExtract(e,t){const n=(0,Ks.parseTimeUnits)(t[1]),r=(0,Zs.reverseTimeUnits)(n);return Gs.ParsingComponents.createRelativeFromReference(e.reference,r)}}Vs.default=Js;var Qs={};Object.defineProperty(Qs,"__esModule",{value:!0});const Xs=Ns,ei=$e,ti=tt;class ni extends ti.AbstractParserWithWordBoundaryChecking{innerPattern(){return new RegExp(`(?:dans|en|pour|pendant)\\s*(${Xs.TIME_UNITS_PATTERN})(?=\\W|$)`,"i")}innerExtract(e,t){const n=(0,Xs.parseTimeUnits)(t[1]);return ei.ParsingComponents.createRelativeFromReference(e.reference,n)}}Qs.default=ni;var ri={};Object.defineProperty(ri,"__esModule",{value:!0});const ai=Ns,si=$e,ii=tt,oi=Kt,ui=re;class di extends ii.AbstractParserWithWordBoundaryChecking{constructor(){super()}innerPattern(){return new RegExp(`(?:les?|la|l'|du|des?)\\s*(${ai.NUMBER_PATTERN})?(?:\\s*(prochaine?s?|derni[eè]re?s?|pass[ée]e?s?|pr[ée]c[ée]dents?|suivante?s?))?\\s*(${(0,ui.matchAnyPattern)(ai.TIME_UNIT_DICTIONARY)})(?:\\s*(prochaine?s?|derni[eè]re?s?|pass[ée]e?s?|pr[ée]c[ée]dents?|suivante?s?))?`,"i")}innerExtract(e,t){const n=t[1]?(0,ai.parseNumberPattern)(t[1]):1;let r={};r[ai.TIME_UNIT_DICTIONARY[t[3].toLowerCase()]]=n;let a=t[2]||t[4]||"";if(a=a.toLowerCase(),a)return(/derni[eè]re?s?/.test(a)||/pass[ée]e?s?/.test(a)||/pr[ée]c[ée]dents?/.test(a))&&(r=(0,oi.reverseTimeUnits)(r)),si.ParsingComponents.createRelativeFromReference(e.reference,r)}}ri.default=di,function(e){var t=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(e,"__esModule",{value:!0}),e.createConfiguration=e.createCasualConfiguration=e.parseDate=e.parse=e.strict=e.casual=void 0;const n=Dn,r=zr,s=t(es),i=t(cs),o=t(Zr),u=t(ps),d=t(Ts),l=t(Ps),c=t(As),m=t(Is),f=t($s),h=t(Vs),p=t(Qs),g=t(ri);function y(e=!0){const t=T(!1,e);return t.parsers.unshift(new s.default),t.parsers.unshift(new i.default),t.parsers.unshift(new g.default),t}function T(e=!0,t=!0){return(0,n.includeCommonConfiguration)({parsers:[new o.default(t),new f.default,new u.default,new m.default,new h.default,new p.default,new c.default],refiners:[new d.default,new l.default]},e)}e.casual=new r.Chrono(y()),e.strict=new r.Chrono(T(!0)),e.parse=function(t,n,r){return e.casual.parse(t,n,r)},e.parseDate=function(t,n,r){return e.casual.parseDate(t,n,r)},e.createCasualConfiguration=y,e.createConfiguration=T}(Xa);var li={},ci={},mi={};function fi(e){return String.fromCharCode(e.charCodeAt(0)-65248)}Object.defineProperty(mi,"__esModule",{value:!0}),mi.toHankaku=void 0,mi.toHankaku=function(e){return String(e).replace(/\u2019/g,"'").replace(/\u201D/g,'"').replace(/\u3000/g," ").replace(/\uFFE5/g,"¥").replace(/[\uFF01\uFF03-\uFF06\uFF08\uFF09\uFF0C-\uFF19\uFF1C-\uFF1F\uFF21-\uFF3B\uFF3D\uFF3F\uFF41-\uFF5B\uFF5D\uFF5E]/g,fi)};var hi=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(ci,"__esModule",{value:!0});const pi=mi,gi=se,yi=hi(Ie),Ti=/(?:(?:([同今本])|((昭和|平成|令和)?([0-9０-９]{1,4}|元)))年\s*)?([0-9０-９]{1,2})月\s*([0-9０-９]{1,2})日/i;ci.default=class{pattern(){return Ti}extract(e,t){const n=parseInt((0,pi.toHankaku)(t[5])),r=parseInt((0,pi.toHankaku)(t[6])),a=e.createParsingComponents({day:r,month:n});if(t[1]&&t[1].match("同|今|本")){const t=(0,yi.default)(e.refDate);a.assign("year",t.year())}if(t[2]){const e=t[4];let n="元"==e?1:parseInt((0,pi.toHankaku)(e));"令和"==t[3]?n+=2018:"平成"==t[3]?n+=1988:"昭和"==t[3]&&(n+=1925),a.assign("year",n)}else{const t=(0,gi.findYearClosestToRef)(e.refDate,r,n);a.imply("year",t)}return a}};var _i={},wi=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(_i,"__esModule",{value:!0});const Mi=wi(ln);class Pi extends Mi.default{patternBetween(){return/^\s*(から|ー|-)\s*$/i}}_i.default=Pi;var vi={},bi=a&&a.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),Ci=a&&a.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),Ai=a&&a.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&bi(t,e,n);return Ci(t,e),t},Ni=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(vi,"__esModule",{value:!0});const Di=Ni(Ie),Oi=X,Ei=Ai(rr),Ri=/今日|当日|昨日|明日|今夜|今夕|今晩|今朝/i;vi.default=class{pattern(){return Ri}extract(e,t){const n=t[0],r=(0,Di.default)(e.refDate),a=e.createParsingComponents();switch(n){case"昨日":return Ei.yesterday(e.reference);case"明日":return Ei.tomorrow(e.reference);case"今日":case"当日":return Ei.today(e.reference)}return"今夜"==n||"今夕"==n||"今晩"==n?(a.imply("hour",22),a.assign("meridiem",Oi.Meridiem.PM)):n.match("今朝")&&(a.imply("hour",6),a.assign("meridiem",Oi.Meridiem.AM)),a.assign("day",r.date()),a.assign("month",r.month()+1),a.assign("year",r.year()),a}},function(e){var t=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(e,"__esModule",{value:!0}),e.createConfiguration=e.createCasualConfiguration=e.parseDate=e.parse=e.strict=e.casual=void 0;const n=t(ci),r=t(_i),s=t(vi),i=zr;function o(){const e=u();return e.parsers.unshift(new s.default),e}function u(){return{parsers:[new n.default],refiners:[new r.default]}}e.casual=new i.Chrono(o()),e.strict=new i.Chrono(u()),e.parse=function(t,n,r){return e.casual.parse(t,n,r)},e.parseDate=function(t,n,r){return e.casual.parseDate(t,n,r)},e.createCasualConfiguration=o,e.createConfiguration=u}(li);var xi={},Ii={},Si={};Object.defineProperty(Si,"__esModule",{value:!0}),Si.parseYear=Si.YEAR_PATTERN=Si.MONTH_DICTIONARY=Si.WEEKDAY_DICTIONARY=void 0,Si.WEEKDAY_DICTIONARY={domingo:0,dom:0,segunda:1,"segunda-feira":1,seg:1,"terça":2,"terça-feira":2,ter:2,quarta:3,"quarta-feira":3,qua:3,quinta:4,"quinta-feira":4,qui:4,sexta:5,"sexta-feira":5,sex:5,"sábado":6,sabado:6,sab:6},Si.MONTH_DICTIONARY={janeiro:1,jan:1,"jan.":1,fevereiro:2,fev:2,"fev.":2,"março":3,mar:3,"mar.":3,abril:4,abr:4,"abr.":4,maio:5,mai:5,"mai.":5,junho:6,jun:6,"jun.":6,julho:7,jul:7,"jul.":7,agosto:8,ago:8,"ago.":8,setembro:9,set:9,"set.":9,outubro:10,out:10,"out.":10,novembro:11,nov:11,"nov.":11,dezembro:12,dez:12,"dez.":12},Si.YEAR_PATTERN="[0-9]{1,4}(?![^\\s]\\d)(?:\\s*[a|d]\\.?\\s*c\\.?|\\s*a\\.?\\s*d\\.?)?",Si.parseYear=function(e){if(e.match(/^[0-9]{1,4}$/)){let t=parseInt(e);return t<100&&(t+=t>50?1900:2e3),t}return e.match(/a\.?\s*c\.?/i)?(e=e.replace(/a\.?\s*c\.?/i,""),-parseInt(e)):parseInt(e)},Object.defineProperty(Ii,"__esModule",{value:!0});const ki=Si,Wi=tt,ji=Dr,$i=new RegExp(`(?:(?:\\,|\\(|\\（)\\s*)?(?:(este|esta|passado|pr[oó]ximo)\\s*)?(${(0,re.matchAnyPattern)(ki.WEEKDAY_DICTIONARY)})(?:\\s*(?:\\,|\\)|\\）))?(?:\\s*(este|esta|passado|pr[óo]ximo)\\s*semana)?(?=\\W|\\d|$)`,"i");class Yi extends Wi.AbstractParserWithWordBoundaryChecking{innerPattern(){return $i}innerExtract(e,t){const n=t[2].toLowerCase(),r=ki.WEEKDAY_DICTIONARY[n];if(void 0===r)return null;const a=t[1],s=t[3];let i=a||s||"";i=i.toLowerCase();let o=null;"passado"==i?o="this":"próximo"==i||"proximo"==i?o="next":"este"==i&&(o="this");const u=(0,ji.toDayJSWeekday)(e.refDate,r,o);return e.createParsingComponents().assign("weekday",r).imply("day",u.date()).imply("month",u.month()+1).imply("year",u.year())}}Ii.default=Yi;var Fi={};Object.defineProperty(Fi,"__esModule",{value:!0});const Bi=Bt;class Ui extends Bi.AbstractTimeExpressionParser{primaryPrefix(){return"(?:(?:ao?|às?|das|da|de|do)\\s*)?"}followingPhase(){return"\\s*(?:\\-|\\–|\\~|\\〜|a(?:o)?|\\?)\\s*"}}Fi.default=Ui;var Li={},Hi=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Li,"__esModule",{value:!0});const zi=Hi(Tn);class Vi extends zi.default{patternBetween(){return new RegExp("^\\s*(?:,|à)?\\s*$")}}Li.default=Vi;var Ki={},Gi=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Ki,"__esModule",{value:!0});const qi=Gi(ln);class Zi extends qi.default{patternBetween(){return/^\s*(?:-)\s*$/i}}Ki.default=Zi;var Ji={};Object.defineProperty(Ji,"__esModule",{value:!0});const Qi=se,Xi=Si,eo=Si,to=tt,no=new RegExp(`([0-9]{1,2})(?:º|ª|°)?(?:\\s*(?:desde|de|\\-|\\–|ao?|\\s)\\s*([0-9]{1,2})(?:º|ª|°)?)?\\s*(?:de)?\\s*(?:-|/|\\s*(?:de|,)?\\s*)(${(0,re.matchAnyPattern)(Xi.MONTH_DICTIONARY)})(?:\\s*(?:de|,)?\\s*(${eo.YEAR_PATTERN}))?(?=\\W|$)`,"i");class ro extends to.AbstractParserWithWordBoundaryChecking{innerPattern(){return no}innerExtract(e,t){const n=e.createParsingResult(t.index,t[0]),r=Xi.MONTH_DICTIONARY[t[3].toLowerCase()],a=parseInt(t[1]);if(a>31)return t.index=t.index+t[1].length,null;if(n.start.assign("month",r),n.start.assign("day",a),t[4]){const e=(0,eo.parseYear)(t[4]);n.start.assign("year",e)}else{const t=(0,Qi.findYearClosestToRef)(e.refDate,a,r);n.start.imply("year",t)}if(t[2]){const e=parseInt(t[2]);n.end=n.start.clone(),n.end.assign("day",e)}return n}}Ji.default=ro;var ao={},so=a&&a.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),io=a&&a.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),oo=a&&a.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&so(t,e,n);return io(t,e),t};Object.defineProperty(ao,"__esModule",{value:!0});const uo=tt,lo=oo(rr);class co extends uo.AbstractParserWithWordBoundaryChecking{innerPattern(e){return/(agora|hoje|amanha|amanhã|ontem)(?=\W|$)/i}innerExtract(e,t){const n=t[0].toLowerCase(),r=e.createParsingComponents();switch(n){case"agora":return lo.now(e.reference);case"hoje":return lo.today(e.reference);case"amanha":case"amanhã":return lo.tomorrow(e.reference);case"ontem":return lo.yesterday(e.reference)}return r}}ao.default=co;var mo={},fo=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(mo,"__esModule",{value:!0});const ho=X,po=tt,go=Be,yo=fo(Ie);class To extends po.AbstractParserWithWordBoundaryChecking{innerPattern(){return/(?:esta\s*)?(manha|manhã|tarde|meia-noite|meio-dia|noite)(?=\W|$)/i}innerExtract(e,t){const n=(0,yo.default)(e.refDate),r=e.createParsingComponents();switch(t[1].toLowerCase()){case"tarde":r.imply("meridiem",ho.Meridiem.PM),r.imply("hour",15);break;case"noite":r.imply("meridiem",ho.Meridiem.PM),r.imply("hour",22);break;case"manha":case"manhã":r.imply("meridiem",ho.Meridiem.AM),r.imply("hour",6);break;case"meia-noite":(0,go.assignTheNextDay)(r,n),r.imply("hour",0),r.imply("minute",0),r.imply("second",0);break;case"meio-dia":r.imply("meridiem",ho.Meridiem.AM),r.imply("hour",12)}return r}}mo.default=To,function(e){var t=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(e,"__esModule",{value:!0}),e.createConfiguration=e.createCasualConfiguration=e.parseDate=e.parse=e.strict=e.casual=void 0;const n=Dn,r=zr,s=t(Zr),i=t(Ii),o=t(Fi),u=t(Li),d=t(Ki),l=t(Ji),c=t(ao),m=t(mo);function f(e=!0){const t=h(!1,e);return t.parsers.push(new c.default),t.parsers.push(new m.default),t}function h(e=!0,t=!0){return(0,n.includeCommonConfiguration)({parsers:[new s.default(t),new i.default,new o.default,new l.default],refiners:[new u.default,new d.default]},e)}e.casual=new r.Chrono(f()),e.strict=new r.Chrono(h(!0)),e.parse=function(t,n,r){return e.casual.parse(t,n,r)},e.parseDate=function(t,n,r){return e.casual.parseDate(t,n,r)},e.createCasualConfiguration=f,e.createConfiguration=h}(xi);var _o={},wo={},Mo=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(wo,"__esModule",{value:!0});const Po=Mo(ln);class vo extends Po.default{patternBetween(){return/^\s*(tot|-)\s*$/i}}wo.default=vo;var bo={},Co=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(bo,"__esModule",{value:!0});const Ao=Co(Tn);class No extends Ao.default{patternBetween(){return new RegExp("^\\s*(om|na|voor|in de|,|-)?\\s*$")}}bo.default=No;var Do={},Oo=a&&a.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),Eo=a&&a.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),Ro=a&&a.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&Oo(t,e,n);return Eo(t,e),t};Object.defineProperty(Do,"__esModule",{value:!0});const xo=tt,Io=Ro(rr);class So extends xo.AbstractParserWithWordBoundaryChecking{innerPattern(e){return/(nu|vandaag|morgen|morgend|gisteren)(?=\W|$)/i}innerExtract(e,t){const n=t[0].toLowerCase(),r=e.createParsingComponents();switch(n){case"nu":return Io.now(e.reference);case"vandaag":return Io.today(e.reference);case"morgen":case"morgend":return Io.tomorrow(e.reference);case"gisteren":return Io.yesterday(e.reference)}return r}}Do.default=So;var ko={},Wo=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(ko,"__esModule",{value:!0});const jo=X,$o=tt,Yo=Wo(Ie),Fo=Be;class Bo extends $o.AbstractParserWithWordBoundaryChecking{innerPattern(){return/(deze)?\s*(namiddag|avond|middernacht|ochtend|middag|'s middags|'s avonds|'s ochtends)(?=\W|$)/i}innerExtract(e,t){const n=(0,Yo.default)(e.refDate),r=e.createParsingComponents();switch("deze"===t[1]&&(r.assign("day",e.refDate.getDate()),r.assign("month",e.refDate.getMonth()+1),r.assign("year",e.refDate.getFullYear())),t[2].toLowerCase()){case"namiddag":case"'s namiddags":r.imply("meridiem",jo.Meridiem.PM),r.imply("hour",15);break;case"avond":case"'s avonds'":r.imply("meridiem",jo.Meridiem.PM),r.imply("hour",20);break;case"middernacht":(0,Fo.assignTheNextDay)(r,n),r.imply("hour",0),r.imply("minute",0),r.imply("second",0);break;case"ochtend":case"'s ochtends":r.imply("meridiem",jo.Meridiem.AM),r.imply("hour",6);break;case"middag":case"'s middags":r.imply("meridiem",jo.Meridiem.AM),r.imply("hour",12)}return r}}ko.default=Bo;var Uo={},Lo={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.parseTimeUnits=e.TIME_UNITS_PATTERN=e.parseYear=e.YEAR_PATTERN=e.parseOrdinalNumberPattern=e.ORDINAL_NUMBER_PATTERN=e.parseNumberPattern=e.NUMBER_PATTERN=e.TIME_UNIT_DICTIONARY=e.ORDINAL_WORD_DICTIONARY=e.INTEGER_WORD_DICTIONARY=e.MONTH_DICTIONARY=e.WEEKDAY_DICTIONARY=void 0;const t=re,n=se;function r(t){const n=t.toLowerCase();return void 0!==e.INTEGER_WORD_DICTIONARY[n]?e.INTEGER_WORD_DICTIONARY[n]:"paar"===n?2:"half"===n||n.match(/halve?/)?.5:parseFloat(n.replace(",","."))}e.WEEKDAY_DICTIONARY={zondag:0,zon:0,"zon.":0,zo:0,"zo.":0,maandag:1,ma:1,"ma.":1,dinsdag:2,din:2,"din.":2,di:2,"di.":2,woensdag:3,woe:3,"woe.":3,wo:3,"wo.":3,donderdag:4,dond:4,"dond.":4,do:4,"do.":4,vrijdag:5,vrij:5,"vrij.":5,vr:5,"vr.":5,zaterdag:6,zat:6,"zat.":6,za:6,"za.":6},e.MONTH_DICTIONARY={januari:1,jan:1,"jan.":1,februari:2,feb:2,"feb.":2,maart:3,mar:3,"mar.":3,april:4,apr:4,"apr.":4,mei:5,juni:6,jun:6,"jun.":6,juli:7,jul:7,"jul.":7,augustus:8,aug:8,"aug.":8,september:9,sep:9,"sep.":9,sept:9,"sept.":9,oktober:10,okt:10,"okt.":10,november:11,nov:11,"nov.":11,december:12,dec:12,"dec.":12},e.INTEGER_WORD_DICTIONARY={een:1,twee:2,drie:3,vier:4,vijf:5,zes:6,zeven:7,acht:8,negen:9,tien:10,elf:11,twaalf:12},e.ORDINAL_WORD_DICTIONARY={eerste:1,tweede:2,derde:3,vierde:4,vijfde:5,zesde:6,zevende:7,achtste:8,negende:9,tiende:10,elfde:11,twaalfde:12,dertiende:13,veertiende:14,vijftiende:15,zestiende:16,zeventiende:17,achttiende:18,negentiende:19,twintigste:20,eenentwintigste:21,"tweeëntwintigste":22,drieentwintigste:23,vierentwintigste:24,vijfentwintigste:25,zesentwintigste:26,zevenentwintigste:27,achtentwintig:28,negenentwintig:29,dertigste:30,eenendertigste:31},e.TIME_UNIT_DICTIONARY={sec:"second",second:"second",seconden:"second",min:"minute",mins:"minute",minute:"minute",minuut:"minute",minuten:"minute",minuutje:"minute",h:"hour",hr:"hour",hrs:"hour",uur:"hour",u:"hour",uren:"hour",dag:"d",dagen:"d",week:"week",weken:"week",maand:"month",maanden:"month",jaar:"year",jr:"year",jaren:"year"},e.NUMBER_PATTERN=`(?:${(0,t.matchAnyPattern)(e.INTEGER_WORD_DICTIONARY)}|[0-9]+|[0-9]+[\\.,][0-9]+|halve?|half|paar)`,e.parseNumberPattern=r,e.ORDINAL_NUMBER_PATTERN=`(?:${(0,t.matchAnyPattern)(e.ORDINAL_WORD_DICTIONARY)}|[0-9]{1,2}(?:ste|de)?)`,e.parseOrdinalNumberPattern=function(t){let n=t.toLowerCase();return void 0!==e.ORDINAL_WORD_DICTIONARY[n]?e.ORDINAL_WORD_DICTIONARY[n]:(n=n.replace(/(?:ste|de)$/i,""),parseInt(n))},e.YEAR_PATTERN="(?:[1-9][0-9]{0,3}\\s*(?:voor Christus|na Christus)|[1-2][0-9]{3}|[5-9][0-9])",e.parseYear=function(e){if(/voor Christus/i.test(e))return e=e.replace(/voor Christus/i,""),-parseInt(e);if(/na Christus/i.test(e))return e=e.replace(/na Christus/i,""),parseInt(e);const t=parseInt(e);return(0,n.findMostLikelyADYear)(t)};const a=`(${e.NUMBER_PATTERN})\\s{0,5}(${(0,t.matchAnyPattern)(e.TIME_UNIT_DICTIONARY)})\\s{0,5}`,s=new RegExp(a,"i");function i(t,n){const a=r(n[1]);t[e.TIME_UNIT_DICTIONARY[n[2].toLowerCase()]]=a}e.TIME_UNITS_PATTERN=(0,t.repeatedTimeunitPattern)("(?:(?:binnen|in)\\s*)?",a),e.parseTimeUnits=function(e){const t={};let n=e,r=s.exec(n);for(;r;)i(t,r),n=n.substring(r[0].length),r=s.exec(n);return t}}(Lo),Object.defineProperty(Uo,"__esModule",{value:!0});const Ho=Lo,zo=$e,Vo=tt;class Ko extends Vo.AbstractParserWithWordBoundaryChecking{innerPattern(){return new RegExp("(?:binnen|in|binnen de|voor)\\s*("+Ho.TIME_UNITS_PATTERN+")(?=\\W|$)","i")}innerExtract(e,t){const n=(0,Ho.parseTimeUnits)(t[1]);return zo.ParsingComponents.createRelativeFromReference(e.reference,n)}}Uo.default=Ko;var Go={};Object.defineProperty(Go,"__esModule",{value:!0});const qo=Lo,Zo=tt,Jo=Dr,Qo=new RegExp(`(?:(?:\\,|\\(|\\（)\\s*)?(?:op\\s*?)?(?:(deze|vorige|volgende)\\s*(?:week\\s*)?)?(${(0,re.matchAnyPattern)(qo.WEEKDAY_DICTIONARY)})(?=\\W|$)`,"i");class Xo extends Zo.AbstractParserWithWordBoundaryChecking{innerPattern(){return Qo}innerExtract(e,t){const n=t[2].toLowerCase(),r=qo.WEEKDAY_DICTIONARY[n],a=t[1],s=t[3];let i=a||s;i=i||"",i=i.toLowerCase();let o=null;"vorige"==i?o="last":"volgende"==i?o="next":"deze"==i&&(o="this");const u=(0,Jo.toDayJSWeekday)(e.refDate,r,o);return e.createParsingComponents().assign("weekday",r).imply("day",u.date()).imply("month",u.month()+1).imply("year",u.year())}}Go.default=Xo;var eu={};Object.defineProperty(eu,"__esModule",{value:!0});const tu=se,nu=Lo,ru=Lo,au=Lo,su=tt,iu=new RegExp(`(?:on\\s*?)?(${ru.ORDINAL_NUMBER_PATTERN})(?:\\s*(?:tot|\\-|\\–|until|through|till|\\s)\\s*(${ru.ORDINAL_NUMBER_PATTERN}))?(?:-|/|\\s*(?:of)?\\s*)(`+(0,re.matchAnyPattern)(nu.MONTH_DICTIONARY)+")(?:(?:-|/|,?\\s*)"+`(${au.YEAR_PATTERN}(?![^\\s]\\d)))?(?=\\W|$)`,"i");class ou extends su.AbstractParserWithWordBoundaryChecking{innerPattern(){return iu}innerExtract(e,t){const n=nu.MONTH_DICTIONARY[t[3].toLowerCase()],r=(0,ru.parseOrdinalNumberPattern)(t[1]);if(r>31)return t.index=t.index+t[1].length,null;const a=e.createParsingComponents({day:r,month:n});if(t[4]){const e=(0,au.parseYear)(t[4]);a.assign("year",e)}else{const t=(0,tu.findYearClosestToRef)(e.refDate,r,n);a.imply("year",t)}if(!t[2])return a;const s=(0,ru.parseOrdinalNumberPattern)(t[2]),i=e.createParsingResult(t.index,t[0]);return i.start=a,i.end=a.clone(),i.end.assign("day",s),i}}eu.default=ou;var uu={};Object.defineProperty(uu,"__esModule",{value:!0});const du=Lo,lu=se,cu=Lo,mu=tt,fu=new RegExp(`(${(0,re.matchAnyPattern)(du.MONTH_DICTIONARY)})\\s*(?:[,-]?\\s*(${cu.YEAR_PATTERN})?)?(?=[^\\s\\w]|\\s+[^0-9]|\\s+$|$)`,"i");class hu extends mu.AbstractParserWithWordBoundaryChecking{innerPattern(){return fu}innerExtract(e,t){const n=e.createParsingComponents();n.imply("day",1);const r=t[1],a=du.MONTH_DICTIONARY[r.toLowerCase()];if(n.assign("month",a),t[2]){const e=(0,cu.parseYear)(t[2]);n.assign("year",e)}else{const t=(0,lu.findYearClosestToRef)(e.refDate,1,a);n.imply("year",t)}return n}}uu.default=hu;var pu={};Object.defineProperty(pu,"__esModule",{value:!0});const gu=tt,yu=new RegExp("([0-9]|0[1-9]|1[012])/([0-9]{4})","i");class Tu extends gu.AbstractParserWithWordBoundaryChecking{innerPattern(){return yu}innerExtract(e,t){const n=parseInt(t[2]),r=parseInt(t[1]);return e.createParsingComponents().imply("day",1).assign("month",r).assign("year",n)}}pu.default=Tu;var _u={};Object.defineProperty(_u,"__esModule",{value:!0});const wu=Bt;class Mu extends wu.AbstractTimeExpressionParser{primaryPrefix(){return"(?:(?:om)\\s*)?"}followingPhase(){return"\\s*(?:\\-|\\–|\\~|\\〜|om|\\?)\\s*"}primarySuffix(){return"(?:\\s*(?:uur))?(?!/)(?=\\W|$)"}extractPrimaryTimeComponents(e,t){return t[0].match(/^\s*\d{4}\s*$/)?null:super.extractPrimaryTimeComponents(e,t)}}_u.default=Mu;var Pu={};Object.defineProperty(Pu,"__esModule",{value:!0});const vu=Lo,bu=tt,Cu=new RegExp(`([0-9]{4})[\\.\\/\\s](?:(${(0,re.matchAnyPattern)(vu.MONTH_DICTIONARY)})|([0-9]{1,2}))[\\.\\/\\s]([0-9]{1,2})(?=\\W|$)`,"i");class Au extends bu.AbstractParserWithWordBoundaryChecking{innerPattern(){return Cu}innerExtract(e,t){const n=t[3]?parseInt(t[3]):vu.MONTH_DICTIONARY[t[2].toLowerCase()];if(n<1||n>12)return null;const r=parseInt(t[1]);return{day:parseInt(t[4]),month:n,year:r}}}Pu.default=Au;var Nu={},Du=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Nu,"__esModule",{value:!0});const Ou=tt,Eu=X,Ru=Be,xu=Du(Ie);class Iu extends Ou.AbstractParserWithWordBoundaryChecking{innerPattern(e){return/(gisteren|morgen|van)(ochtend|middag|namiddag|avond|nacht)(?=\W|$)/i}innerExtract(e,t){const n=t[1].toLowerCase(),r=t[2].toLowerCase(),a=e.createParsingComponents(),s=(0,xu.default)(e.refDate);switch(n){case"gisteren":(0,Ru.assignSimilarDate)(a,s.add(-1,"day"));break;case"van":(0,Ru.assignSimilarDate)(a,s);break;case"morgen":(0,Ru.assignTheNextDay)(a,s)}switch(r){case"ochtend":a.imply("meridiem",Eu.Meridiem.AM),a.imply("hour",6);break;case"middag":a.imply("meridiem",Eu.Meridiem.AM),a.imply("hour",12);break;case"namiddag":a.imply("meridiem",Eu.Meridiem.PM),a.imply("hour",15);break;case"avond":a.imply("meridiem",Eu.Meridiem.PM),a.imply("hour",20)}return a}}Nu.default=Iu;var Su={};Object.defineProperty(Su,"__esModule",{value:!0});const ku=Lo,Wu=$e,ju=tt,$u=Kt,Yu=new RegExp(`(deze|vorige|afgelopen|komende|over|\\+|-)\\s*(${ku.TIME_UNITS_PATTERN})(?=\\W|$)`,"i");class Fu extends ju.AbstractParserWithWordBoundaryChecking{innerPattern(){return Yu}innerExtract(e,t){const n=t[1].toLowerCase();let r=(0,ku.parseTimeUnits)(t[2]);switch(n){case"vorige":case"afgelopen":case"-":r=(0,$u.reverseTimeUnits)(r)}return Wu.ParsingComponents.createRelativeFromReference(e.reference,r)}}Su.default=Fu;var Bu={},Uu=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Bu,"__esModule",{value:!0});const Lu=Lo,Hu=$e,zu=Uu(Ie),Vu=tt,Ku=new RegExp(`(dit|deze|komende|volgend|volgende|afgelopen|vorige)\\s*(${(0,re.matchAnyPattern)(Lu.TIME_UNIT_DICTIONARY)})(?=\\s*)(?=\\W|$)`,"i");class Gu extends Vu.AbstractParserWithWordBoundaryChecking{innerPattern(){return Ku}innerExtract(e,t){const n=t[1].toLowerCase(),r=t[2].toLowerCase(),a=Lu.TIME_UNIT_DICTIONARY[r];if("volgend"==n||"volgende"==n||"komende"==n){const t={};return t[a]=1,Hu.ParsingComponents.createRelativeFromReference(e.reference,t)}if("afgelopen"==n||"vorige"==n){const t={};return t[a]=-1,Hu.ParsingComponents.createRelativeFromReference(e.reference,t)}const s=e.createParsingComponents();let i=(0,zu.default)(e.reference.instant);return r.match(/week/i)?(i=i.add(-i.get("d"),"d"),s.imply("day",i.date()),s.imply("month",i.month()+1),s.imply("year",i.year())):r.match(/maand/i)?(i=i.add(1-i.date(),"d"),s.imply("day",i.date()),s.assign("year",i.year()),s.assign("month",i.month()+1)):r.match(/jaar/i)&&(i=i.add(1-i.date(),"d"),i=i.add(-i.month(),"month"),s.imply("day",i.date()),s.imply("month",i.month()+1),s.assign("year",i.year())),s}}Bu.default=Gu;var qu={};Object.defineProperty(qu,"__esModule",{value:!0});const Zu=Lo,Ju=$e,Qu=tt,Xu=Kt,ed=new RegExp("("+Zu.TIME_UNITS_PATTERN+")(?:geleden|voor|eerder)(?=(?:\\W|$))","i"),td=new RegExp("("+Zu.TIME_UNITS_PATTERN+")geleden(?=(?:\\W|$))","i");class nd extends Qu.AbstractParserWithWordBoundaryChecking{constructor(e){super(),this.strictMode=e}innerPattern(){return this.strictMode?td:ed}innerExtract(e,t){const n=(0,Zu.parseTimeUnits)(t[1]),r=(0,Xu.reverseTimeUnits)(n);return Ju.ParsingComponents.createRelativeFromReference(e.reference,r)}}qu.default=nd;var rd={};Object.defineProperty(rd,"__esModule",{value:!0});const ad=Lo,sd=$e,id=tt,od=new RegExp("("+ad.TIME_UNITS_PATTERN+")(later|na|vanaf nu|voortaan|vooruit|uit)(?=(?:\\W|$))","i"),ud=new RegExp("("+ad.TIME_UNITS_PATTERN+")(later|vanaf nu)(?=(?:\\W|$))","i");class dd extends id.AbstractParserWithWordBoundaryChecking{constructor(e){super(),this.strictMode=e}innerPattern(){return this.strictMode?ud:od}innerExtract(e,t){const n=(0,ad.parseTimeUnits)(t[1]);return sd.ParsingComponents.createRelativeFromReference(e.reference,n)}}rd.default=dd,function(e){var t=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(e,"__esModule",{value:!0}),e.createConfiguration=e.createCasualConfiguration=e.parseDate=e.parse=e.strict=e.casual=void 0;const n=Dn,r=zr,s=t(wo),i=t(bo),o=t(Do),u=t(ko),d=t(Zr),l=t(Uo),c=t(Go),m=t(eu),f=t(uu),h=t(pu),p=t(_u),g=t(Pu),y=t(Nu),T=t(Su),_=t(Bu),w=t(qu),M=t(rd);function P(e=!0){const t=v(!1,e);return t.parsers.unshift(new o.default),t.parsers.unshift(new u.default),t.parsers.unshift(new y.default),t.parsers.unshift(new f.default),t.parsers.unshift(new _.default),t.parsers.unshift(new T.default),t}function v(e=!0,t=!0){return(0,n.includeCommonConfiguration)({parsers:[new d.default(t),new l.default,new m.default,new f.default,new c.default,new g.default,new h.default,new p.default(e),new w.default(e),new M.default(e)],refiners:[new i.default,new s.default]},e)}e.casual=new r.Chrono(P()),e.strict=new r.Chrono(v(!0)),e.parse=function(t,n,r){return e.casual.parse(t,n,r)},e.parseDate=function(t,n,r){return e.casual.parseDate(t,n,r)},e.createCasualConfiguration=P,e.createConfiguration=v}(_o);var ld={},cd={},md={},fd=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(md,"__esModule",{value:!0});const hd=fd(Ie),pd=tt;class gd extends pd.AbstractParserWithWordBoundaryChecking{innerPattern(e){return new RegExp("(而家|立(?:刻|即)|即刻)|(今|明|前|大前|後|大後|聽|昨|尋|琴)(早|朝|晚)|(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨))|(今|明|前|大前|後|大後|聽|昨|尋|琴)(?:日|天)(?:[\\s|,|，]*)(?:(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨)))?","i")}innerExtract(e,t){const n=t.index,r=e.createParsingResult(n,t[0]),a=(0,hd.default)(e.refDate);let s=a;if(t[1])r.start.imply("hour",a.hour()),r.start.imply("minute",a.minute()),r.start.imply("second",a.second()),r.start.imply("millisecond",a.millisecond());else if(t[2]){const e=t[2],n=t[3];"明"==e||"聽"==e?a.hour()>1&&(s=s.add(1,"day")):"昨"==e||"尋"==e||"琴"==e?s=s.add(-1,"day"):"前"==e?s=s.add(-2,"day"):"大前"==e?s=s.add(-3,"day"):"後"==e?s=s.add(2,"day"):"大後"==e&&(s=s.add(3,"day")),"早"==n||"朝"==n?r.start.imply("hour",6):"晚"==n&&(r.start.imply("hour",22),r.start.imply("meridiem",1))}else if(t[4]){const e=t[4][0];"早"==e||"朝"==e||"上"==e?r.start.imply("hour",6):"下"==e||"晏"==e?(r.start.imply("hour",15),r.start.imply("meridiem",1)):"中"==e?(r.start.imply("hour",12),r.start.imply("meridiem",1)):"夜"==e||"晚"==e?(r.start.imply("hour",22),r.start.imply("meridiem",1)):"凌"==e&&r.start.imply("hour",0)}else if(t[5]){const e=t[5];"明"==e||"聽"==e?a.hour()>1&&(s=s.add(1,"day")):"昨"==e||"尋"==e||"琴"==e?s=s.add(-1,"day"):"前"==e?s=s.add(-2,"day"):"大前"==e?s=s.add(-3,"day"):"後"==e?s=s.add(2,"day"):"大後"==e&&(s=s.add(3,"day"));const n=t[6];if(n){const e=n[0];"早"==e||"朝"==e||"上"==e?r.start.imply("hour",6):"下"==e||"晏"==e?(r.start.imply("hour",15),r.start.imply("meridiem",1)):"中"==e?(r.start.imply("hour",12),r.start.imply("meridiem",1)):"夜"==e||"晚"==e?(r.start.imply("hour",22),r.start.imply("meridiem",1)):"凌"==e&&r.start.imply("hour",0)}}return r.start.assign("day",s.date()),r.start.assign("month",s.month()+1),r.start.assign("year",s.year()),r}}md.default=gd;var yd={},Td={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.zhStringToYear=e.zhStringToNumber=e.WEEKDAY_OFFSET=e.NUMBER=void 0,e.NUMBER={"零":0,"一":1,"二":2,"兩":2,"三":3,"四":4,"五":5,"六":6,"七":7,"八":8,"九":9,"十":10,"廿":20,"卅":30},e.WEEKDAY_OFFSET={"天":0,"日":0,"一":1,"二":2,"三":3,"四":4,"五":5,"六":6},e.zhStringToNumber=function(t){let n=0;for(let r=0;r<t.length;r++){const a=t[r];"十"===a?n=0===n?e.NUMBER[a]:n*e.NUMBER[a]:n+=e.NUMBER[a]}return n},e.zhStringToYear=function(t){let n="";for(let r=0;r<t.length;r++){const a=t[r];n+=e.NUMBER[a]}return parseInt(n)}}(Td);var _d=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(yd,"__esModule",{value:!0});const wd=_d(Ie),Md=tt,Pd=Td;class vd extends Md.AbstractParserWithWordBoundaryChecking{innerPattern(){return new RegExp("(\\d{2,4}|["+Object.keys(Pd.NUMBER).join("")+"]{4}|["+Object.keys(Pd.NUMBER).join("")+"]{2})?(?:\\s*)(?:年)?(?:[\\s|,|，]*)(\\d{1,2}|["+Object.keys(Pd.NUMBER).join("")+"]{1,2})(?:\\s*)(?:月)(?:\\s*)(\\d{1,2}|["+Object.keys(Pd.NUMBER).join("")+"]{1,2})?(?:\\s*)(?:日|號)?")}innerExtract(e,t){const n=(0,wd.default)(e.refDate),r=e.createParsingResult(t.index,t[0]);let a=parseInt(t[2]);if(isNaN(a)&&(a=(0,Pd.zhStringToNumber)(t[2])),r.start.assign("month",a),t[3]){let e=parseInt(t[3]);isNaN(e)&&(e=(0,Pd.zhStringToNumber)(t[3])),r.start.assign("day",e)}else r.start.imply("day",n.date());if(t[1]){let e=parseInt(t[1]);isNaN(e)&&(e=(0,Pd.zhStringToYear)(t[1])),r.start.assign("year",e)}else r.start.imply("year",n.year());return r}}yd.default=vd;var bd={},Cd=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(bd,"__esModule",{value:!0});const Ad=Cd(Ie),Nd=tt,Dd=Td,Od=new RegExp("(\\d+|["+Object.keys(Dd.NUMBER).join("")+"]+|半|幾)(?:\\s*)(?:個)?(秒(?:鐘)?|分鐘|小時|鐘|日|天|星期|禮拜|月|年)(?:(?:之|過)?後|(?:之)?內)","i");class Ed extends Nd.AbstractParserWithWordBoundaryChecking{innerPattern(){return Od}innerExtract(e,t){const n=e.createParsingResult(t.index,t[0]);let r=parseInt(t[1]);if(isNaN(r)&&(r=(0,Dd.zhStringToNumber)(t[1])),isNaN(r)){const e=t[1];if("幾"===e)r=3;else{if("半"!==e)return null;r=.5}}let a=(0,Ad.default)(e.refDate);const s=t[2][0];return s.match(/[日天星禮月年]/)?("日"==s||"天"==s?a=a.add(r,"d"):"星"==s||"禮"==s?a=a.add(7*r,"d"):"月"==s?a=a.add(r,"month"):"年"==s&&(a=a.add(r,"year")),n.start.assign("year",a.year()),n.start.assign("month",a.month()+1),n.start.assign("day",a.date()),n):("秒"==s?a=a.add(r,"second"):"分"==s?a=a.add(r,"minute"):"小"!=s&&"鐘"!=s||(a=a.add(r,"hour")),n.start.imply("year",a.year()),n.start.imply("month",a.month()+1),n.start.imply("day",a.date()),n.start.assign("hour",a.hour()),n.start.assign("minute",a.minute()),n.start.assign("second",a.second()),n)}}bd.default=Ed;var Rd={},xd=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Rd,"__esModule",{value:!0});const Id=xd(Ie),Sd=tt,kd=Td,Wd=new RegExp("(?<prefix>上|今|下|這|呢)(?:個)?(?:星期|禮拜|週)(?<weekday>"+Object.keys(kd.WEEKDAY_OFFSET).join("|")+")");class jd extends Sd.AbstractParserWithWordBoundaryChecking{innerPattern(){return Wd}innerExtract(e,t){const n=e.createParsingResult(t.index,t[0]),r=t.groups.weekday,a=kd.WEEKDAY_OFFSET[r];if(void 0===a)return null;let s=null;const i=t.groups.prefix;"上"==i?s="last":"下"==i?s="next":"今"!=i&&"這"!=i&&"呢"!=i||(s="this");let o=(0,Id.default)(e.refDate),u=!1;const d=o.day();return"last"==s||"past"==s?(o=o.day(a-7),u=!0):"next"==s?(o=o.day(a+7),u=!0):o="this"==s?o.day(a):Math.abs(a-7-d)<Math.abs(a-d)?o.day(a-7):Math.abs(a+7-d)<Math.abs(a-d)?o.day(a+7):o.day(a),n.start.assign("weekday",a),u?(n.start.assign("day",o.date()),n.start.assign("month",o.month()+1),n.start.assign("year",o.year())):(n.start.imply("day",o.date()),n.start.imply("month",o.month()+1),n.start.imply("year",o.year())),n}}Rd.default=jd;var $d={},Yd=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty($d,"__esModule",{value:!0});const Fd=Yd(Ie),Bd=tt,Ud=Td,Ld=new RegExp("(?:由|從|自)?(?:(今|明|前|大前|後|大後|聽|昨|尋|琴)(早|朝|晚)|(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨))|(今|明|前|大前|後|大後|聽|昨|尋|琴)(?:日|天)(?:[\\s,，]*)(?:(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨)))?)?(?:[\\s,，]*)(?:(\\d+|["+Object.keys(Ud.NUMBER).join("")+"]+)(?:\\s*)(?:點|時|:|：)(?:\\s*)(\\d+|半|正|整|["+Object.keys(Ud.NUMBER).join("")+"]+)?(?:\\s*)(?:分|:|：)?(?:\\s*)(\\d+|["+Object.keys(Ud.NUMBER).join("")+"]+)?(?:\\s*)(?:秒)?)(?:\\s*(A.M.|P.M.|AM?|PM?))?","i"),Hd=new RegExp("(?:^\\s*(?:到|至|\\-|\\–|\\~|\\〜)\\s*)(?:(今|明|前|大前|後|大後|聽|昨|尋|琴)(早|朝|晚)|(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨))|(今|明|前|大前|後|大後|聽|昨|尋|琴)(?:日|天)(?:[\\s,，]*)(?:(上(?:午|晝)|朝(?:早)|早(?:上)|下(?:午|晝)|晏(?:晝)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨)))?)?(?:[\\s,，]*)(?:(\\d+|["+Object.keys(Ud.NUMBER).join("")+"]+)(?:\\s*)(?:點|時|:|：)(?:\\s*)(\\d+|半|正|整|["+Object.keys(Ud.NUMBER).join("")+"]+)?(?:\\s*)(?:分|:|：)?(?:\\s*)(\\d+|["+Object.keys(Ud.NUMBER).join("")+"]+)?(?:\\s*)(?:秒)?)(?:\\s*(A.M.|P.M.|AM?|PM?))?","i");class zd extends Bd.AbstractParserWithWordBoundaryChecking{innerPattern(){return Ld}innerExtract(e,t){if(t.index>0&&e.text[t.index-1].match(/\w/))return null;const n=(0,Fd.default)(e.refDate),r=e.createParsingResult(t.index,t[0]),a=n.clone();if(t[1])"明"==(l=t[1])||"聽"==l?n.hour()>1&&a.add(1,"day"):"昨"==l||"尋"==l||"琴"==l?a.add(-1,"day"):"前"==l?a.add(-2,"day"):"大前"==l?a.add(-3,"day"):"後"==l?a.add(2,"day"):"大後"==l&&a.add(3,"day"),r.start.assign("day",a.date()),r.start.assign("month",a.month()+1),r.start.assign("year",a.year());else if(t[4]){"明"==(c=t[4])||"聽"==c?a.add(1,"day"):"昨"==c||"尋"==c||"琴"==c?a.add(-1,"day"):"前"==c?a.add(-2,"day"):"大前"==c?a.add(-3,"day"):"後"==c?a.add(2,"day"):"大後"==c&&a.add(3,"day"),r.start.assign("day",a.date()),r.start.assign("month",a.month()+1),r.start.assign("year",a.year())}else r.start.imply("day",a.date()),r.start.imply("month",a.month()+1),r.start.imply("year",a.year());let s=0,i=0,o=-1;if(t[8]){var u=parseInt(t[8]);if(isNaN(u)&&(u=(0,Ud.zhStringToNumber)(t[8])),u>=60)return null;r.start.assign("second",u)}if(s=parseInt(t[6]),isNaN(s)&&(s=(0,Ud.zhStringToNumber)(t[6])),t[7]?"半"==t[7]?i=30:"正"==t[7]||"整"==t[7]?i=0:(i=parseInt(t[7]),isNaN(i)&&(i=(0,Ud.zhStringToNumber)(t[7]))):s>100&&(i=s%100,s=Math.floor(s/100)),i>=60)return null;if(s>24)return null;if(s>=12&&(o=1),t[9]){if(s>12)return null;"a"==(m=t[9][0].toLowerCase())&&(o=0,12==s&&(s=0)),"p"==m&&(o=1,12!=s&&(s+=12))}else if(t[2]){"朝"==(f=t[2][0])||"早"==f?(o=0,12==s&&(s=0)):"晚"==f&&(o=1,12!=s&&(s+=12))}else if(t[3]){"上"==(h=t[3][0])||"朝"==h||"早"==h||"凌"==h?(o=0,12==s&&(s=0)):"下"!=h&&"晏"!=h&&"晚"!=h||(o=1,12!=s&&(s+=12))}else if(t[5]){"上"==(p=t[5][0])||"朝"==p||"早"==p||"凌"==p?(o=0,12==s&&(s=0)):"下"!=p&&"晏"!=p&&"晚"!=p||(o=1,12!=s&&(s+=12))}if(r.start.assign("hour",s),r.start.assign("minute",i),o>=0?r.start.assign("meridiem",o):s<12?r.start.imply("meridiem",0):r.start.imply("meridiem",1),!(t=Hd.exec(e.text.substring(r.index+r.text.length))))return r.text.match(/^\d+$/)?null:r;const d=a.clone();var l;if(r.end=e.createParsingComponents(),t[1])"明"==(l=t[1])||"聽"==l?n.hour()>1&&d.add(1,"day"):"昨"==l||"尋"==l||"琴"==l?d.add(-1,"day"):"前"==l?d.add(-2,"day"):"大前"==l?d.add(-3,"day"):"後"==l?d.add(2,"day"):"大後"==l&&d.add(3,"day"),r.end.assign("day",d.date()),r.end.assign("month",d.month()+1),r.end.assign("year",d.year());else if(t[4]){var c;"明"==(c=t[4])||"聽"==c?d.add(1,"day"):"昨"==c||"尋"==c||"琴"==c?d.add(-1,"day"):"前"==c?d.add(-2,"day"):"大前"==c?d.add(-3,"day"):"後"==c?d.add(2,"day"):"大後"==c&&d.add(3,"day"),r.end.assign("day",d.date()),r.end.assign("month",d.month()+1),r.end.assign("year",d.year())}else r.end.imply("day",d.date()),r.end.imply("month",d.month()+1),r.end.imply("year",d.year());if(s=0,i=0,o=-1,t[8]){u=parseInt(t[8]);if(isNaN(u)&&(u=(0,Ud.zhStringToNumber)(t[8])),u>=60)return null;r.end.assign("second",u)}if(s=parseInt(t[6]),isNaN(s)&&(s=(0,Ud.zhStringToNumber)(t[6])),t[7]?"半"==t[7]?i=30:"正"==t[7]||"整"==t[7]?i=0:(i=parseInt(t[7]),isNaN(i)&&(i=(0,Ud.zhStringToNumber)(t[7]))):s>100&&(i=s%100,s=Math.floor(s/100)),i>=60)return null;if(s>24)return null;if(s>=12&&(o=1),t[9]){if(s>12)return null;var m;"a"==(m=t[9][0].toLowerCase())&&(o=0,12==s&&(s=0)),"p"==m&&(o=1,12!=s&&(s+=12)),r.start.isCertain("meridiem")||(0==o?(r.start.imply("meridiem",0),12==r.start.get("hour")&&r.start.assign("hour",0)):(r.start.imply("meridiem",1),12!=r.start.get("hour")&&r.start.assign("hour",r.start.get("hour")+12)))}else if(t[2]){var f;"朝"==(f=t[2][0])||"早"==f?(o=0,12==s&&(s=0)):"晚"==f&&(o=1,12!=s&&(s+=12))}else if(t[3]){var h;"上"==(h=t[3][0])||"朝"==h||"早"==h||"凌"==h?(o=0,12==s&&(s=0)):"下"!=h&&"晏"!=h&&"晚"!=h||(o=1,12!=s&&(s+=12))}else if(t[5]){var p;"上"==(p=t[5][0])||"朝"==p||"早"==p||"凌"==p?(o=0,12==s&&(s=0)):"下"!=p&&"晏"!=p&&"晚"!=p||(o=1,12!=s&&(s+=12))}if(r.text=r.text+t[0],r.end.assign("hour",s),r.end.assign("minute",i),o>=0)r.end.assign("meridiem",o);else{r.start.isCertain("meridiem")&&1==r.start.get("meridiem")&&r.start.get("hour")>s?r.end.imply("meridiem",0):s>12&&r.end.imply("meridiem",1)}return r.end.date().getTime()<r.start.date().getTime()&&r.end.imply("day",r.end.get("day")+1),r}}$d.default=zd;var Vd={},Kd=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Vd,"__esModule",{value:!0});const Gd=Kd(Ie),qd=tt,Zd=Td,Jd=new RegExp("(?:星期|禮拜|週)(?<weekday>"+Object.keys(Zd.WEEKDAY_OFFSET).join("|")+")");class Qd extends qd.AbstractParserWithWordBoundaryChecking{innerPattern(){return Jd}innerExtract(e,t){const n=e.createParsingResult(t.index,t[0]),r=t.groups.weekday,a=Zd.WEEKDAY_OFFSET[r];if(void 0===a)return null;let s=(0,Gd.default)(e.refDate);const i=s.day();return s=Math.abs(a-7-i)<Math.abs(a-i)?s.day(a-7):Math.abs(a+7-i)<Math.abs(a-i)?s.day(a+7):s.day(a),n.start.assign("weekday",a),n.start.imply("day",s.date()),n.start.imply("month",s.month()+1),n.start.imply("year",s.year()),n}}Vd.default=Qd;var Xd={},el=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Xd,"__esModule",{value:!0});const tl=el(ln);class nl extends tl.default{patternBetween(){return/^\s*(至|到|\-|\~|～|－|ー)\s*$/i}}Xd.default=nl;var rl={},al=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(rl,"__esModule",{value:!0});const sl=al(Tn);class il extends sl.default{patternBetween(){return/^\s*$/i}}rl.default=il,function(e){var t=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(e,"__esModule",{value:!0}),e.createConfiguration=e.createCasualConfiguration=e.parseDate=e.parse=e.strict=e.casual=e.hant=void 0;const n=zr,r=t(xn),s=Dn,i=t(md),o=t(yd),u=t(bd),d=t(Rd),l=t($d),c=t(Vd),m=t(Xd),f=t(rl);function h(){const e=p();return e.parsers.unshift(new i.default),e}function p(){const e=(0,s.includeCommonConfiguration)({parsers:[new o.default,new d.default,new c.default,new l.default,new u.default],refiners:[new m.default,new f.default]});return e.refiners=e.refiners.filter((e=>!(e instanceof r.default))),e}e.hant=new n.Chrono(h()),e.casual=new n.Chrono(h()),e.strict=new n.Chrono(p()),e.parse=function(t,n,r){return e.casual.parse(t,n,r)},e.parseDate=function(t,n,r){return e.casual.parseDate(t,n,r)},e.createCasualConfiguration=h,e.createConfiguration=p}(cd);var ol={},ul={},dl=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(ul,"__esModule",{value:!0});const ll=dl(Ie),cl=tt;class ml extends cl.AbstractParserWithWordBoundaryChecking{innerPattern(e){return new RegExp("(现在|立(?:刻|即)|即刻)|(今|明|前|大前|后|大后|昨)(早|晚)|(上(?:午)|早(?:上)|下(?:午)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨))|(今|明|前|大前|后|大后|昨)(?:日|天)(?:[\\s|,|，]*)(?:(上(?:午)|早(?:上)|下(?:午)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨)))?","i")}innerExtract(e,t){const n=t.index,r=e.createParsingResult(n,t[0]),a=(0,ll.default)(e.refDate);let s=a;if(t[1])r.start.imply("hour",a.hour()),r.start.imply("minute",a.minute()),r.start.imply("second",a.second()),r.start.imply("millisecond",a.millisecond());else if(t[2]){const e=t[2],n=t[3];"明"==e?a.hour()>1&&(s=s.add(1,"day")):"昨"==e?s=s.add(-1,"day"):"前"==e?s=s.add(-2,"day"):"大前"==e?s=s.add(-3,"day"):"后"==e?s=s.add(2,"day"):"大后"==e&&(s=s.add(3,"day")),"早"==n?r.start.imply("hour",6):"晚"==n&&(r.start.imply("hour",22),r.start.imply("meridiem",1))}else if(t[4]){const e=t[4][0];"早"==e||"上"==e?r.start.imply("hour",6):"下"==e?(r.start.imply("hour",15),r.start.imply("meridiem",1)):"中"==e?(r.start.imply("hour",12),r.start.imply("meridiem",1)):"夜"==e||"晚"==e?(r.start.imply("hour",22),r.start.imply("meridiem",1)):"凌"==e&&r.start.imply("hour",0)}else if(t[5]){const e=t[5];"明"==e?a.hour()>1&&(s=s.add(1,"day")):"昨"==e?s=s.add(-1,"day"):"前"==e?s=s.add(-2,"day"):"大前"==e?s=s.add(-3,"day"):"后"==e?s=s.add(2,"day"):"大后"==e&&(s=s.add(3,"day"));const n=t[6];if(n){const e=n[0];"早"==e||"上"==e?r.start.imply("hour",6):"下"==e?(r.start.imply("hour",15),r.start.imply("meridiem",1)):"中"==e?(r.start.imply("hour",12),r.start.imply("meridiem",1)):"夜"==e||"晚"==e?(r.start.imply("hour",22),r.start.imply("meridiem",1)):"凌"==e&&r.start.imply("hour",0)}}return r.start.assign("day",s.date()),r.start.assign("month",s.month()+1),r.start.assign("year",s.year()),r}}ul.default=ml;var fl={},hl={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.zhStringToYear=e.zhStringToNumber=e.WEEKDAY_OFFSET=e.NUMBER=void 0,e.NUMBER={"零":0,"〇":0,"一":1,"二":2,"两":2,"三":3,"四":4,"五":5,"六":6,"七":7,"八":8,"九":9,"十":10},e.WEEKDAY_OFFSET={"天":0,"日":0,"一":1,"二":2,"三":3,"四":4,"五":5,"六":6},e.zhStringToNumber=function(t){let n=0;for(let r=0;r<t.length;r++){const a=t[r];"十"===a?n=0===n?e.NUMBER[a]:n*e.NUMBER[a]:n+=e.NUMBER[a]}return n},e.zhStringToYear=function(t){let n="";for(let r=0;r<t.length;r++){const a=t[r];n+=e.NUMBER[a]}return parseInt(n)}}(hl);var pl=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(fl,"__esModule",{value:!0});const gl=pl(Ie),yl=tt,Tl=hl;class _l extends yl.AbstractParserWithWordBoundaryChecking{innerPattern(){return new RegExp("(\\d{2,4}|["+Object.keys(Tl.NUMBER).join("")+"]{4}|["+Object.keys(Tl.NUMBER).join("")+"]{2})?(?:\\s*)(?:年)?(?:[\\s|,|，]*)(\\d{1,2}|["+Object.keys(Tl.NUMBER).join("")+"]{1,3})(?:\\s*)(?:月)(?:\\s*)(\\d{1,2}|["+Object.keys(Tl.NUMBER).join("")+"]{1,3})?(?:\\s*)(?:日|号)?")}innerExtract(e,t){const n=(0,gl.default)(e.refDate),r=e.createParsingResult(t.index,t[0]);let a=parseInt(t[2]);if(isNaN(a)&&(a=(0,Tl.zhStringToNumber)(t[2])),r.start.assign("month",a),t[3]){let e=parseInt(t[3]);isNaN(e)&&(e=(0,Tl.zhStringToNumber)(t[3])),r.start.assign("day",e)}else r.start.imply("day",n.date());if(t[1]){let e=parseInt(t[1]);isNaN(e)&&(e=(0,Tl.zhStringToYear)(t[1])),r.start.assign("year",e)}else r.start.imply("year",n.year());return r}}fl.default=_l;var wl={},Ml=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(wl,"__esModule",{value:!0});const Pl=Ml(Ie),vl=tt,bl=hl,Cl=new RegExp("(\\d+|["+Object.keys(bl.NUMBER).join("")+"]+|半|几)(?:\\s*)(?:个)?(秒(?:钟)?|分钟|小时|钟|日|天|星期|礼拜|月|年)(?:(?:之|过)?后|(?:之)?内)","i");class Al extends vl.AbstractParserWithWordBoundaryChecking{innerPattern(){return Cl}innerExtract(e,t){const n=e.createParsingResult(t.index,t[0]);let r=parseInt(t[1]);if(isNaN(r)&&(r=(0,bl.zhStringToNumber)(t[1])),isNaN(r)){const e=t[1];if("几"===e)r=3;else{if("半"!==e)return null;r=.5}}let a=(0,Pl.default)(e.refDate);const s=t[2][0];return s.match(/[日天星礼月年]/)?("日"==s||"天"==s?a=a.add(r,"d"):"星"==s||"礼"==s?a=a.add(7*r,"d"):"月"==s?a=a.add(r,"month"):"年"==s&&(a=a.add(r,"year")),n.start.assign("year",a.year()),n.start.assign("month",a.month()+1),n.start.assign("day",a.date()),n):("秒"==s?a=a.add(r,"second"):"分"==s?a=a.add(r,"minute"):"小"!=s&&"钟"!=s||(a=a.add(r,"hour")),n.start.imply("year",a.year()),n.start.imply("month",a.month()+1),n.start.imply("day",a.date()),n.start.assign("hour",a.hour()),n.start.assign("minute",a.minute()),n.start.assign("second",a.second()),n)}}wl.default=Al;var Nl={},Dl=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Nl,"__esModule",{value:!0});const Ol=Dl(Ie),El=tt,Rl=hl,xl=new RegExp("(?<prefix>上|下|这)(?:个)?(?:星期|礼拜|周)(?<weekday>"+Object.keys(Rl.WEEKDAY_OFFSET).join("|")+")");class Il extends El.AbstractParserWithWordBoundaryChecking{innerPattern(){return xl}innerExtract(e,t){const n=e.createParsingResult(t.index,t[0]),r=t.groups.weekday,a=Rl.WEEKDAY_OFFSET[r];if(void 0===a)return null;let s=null;const i=t.groups.prefix;"上"==i?s="last":"下"==i?s="next":"这"==i&&(s="this");let o=(0,Ol.default)(e.refDate),u=!1;const d=o.day();return"last"==s||"past"==s?(o=o.day(a-7),u=!0):"next"==s?(o=o.day(a+7),u=!0):o="this"==s?o.day(a):Math.abs(a-7-d)<Math.abs(a-d)?o.day(a-7):Math.abs(a+7-d)<Math.abs(a-d)?o.day(a+7):o.day(a),n.start.assign("weekday",a),u?(n.start.assign("day",o.date()),n.start.assign("month",o.month()+1),n.start.assign("year",o.year())):(n.start.imply("day",o.date()),n.start.imply("month",o.month()+1),n.start.imply("year",o.year())),n}}Nl.default=Il;var Sl={},kl=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Sl,"__esModule",{value:!0});const Wl=kl(Ie),jl=tt,$l=hl,Yl=new RegExp("(?:从|自)?(?:(今|明|前|大前|后|大后|昨)(早|朝|晚)|(上(?:午)|早(?:上)|下(?:午)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨))|(今|明|前|大前|后|大后|昨)(?:日|天)(?:[\\s,，]*)(?:(上(?:午)|早(?:上)|下(?:午)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨)))?)?(?:[\\s,，]*)(?:(\\d+|["+Object.keys($l.NUMBER).join("")+"]+)(?:\\s*)(?:点|时|:|：)(?:\\s*)(\\d+|半|正|整|["+Object.keys($l.NUMBER).join("")+"]+)?(?:\\s*)(?:分|:|：)?(?:\\s*)(\\d+|["+Object.keys($l.NUMBER).join("")+"]+)?(?:\\s*)(?:秒)?)(?:\\s*(A.M.|P.M.|AM?|PM?))?","i"),Fl=new RegExp("(?:^\\s*(?:到|至|\\-|\\–|\\~|\\〜)\\s*)(?:(今|明|前|大前|后|大后|昨)(早|朝|晚)|(上(?:午)|早(?:上)|下(?:午)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨))|(今|明|前|大前|后|大后|昨)(?:日|天)(?:[\\s,，]*)(?:(上(?:午)|早(?:上)|下(?:午)|晚(?:上)|夜(?:晚)?|中(?:午)|凌(?:晨)))?)?(?:[\\s,，]*)(?:(\\d+|["+Object.keys($l.NUMBER).join("")+"]+)(?:\\s*)(?:点|时|:|：)(?:\\s*)(\\d+|半|正|整|["+Object.keys($l.NUMBER).join("")+"]+)?(?:\\s*)(?:分|:|：)?(?:\\s*)(\\d+|["+Object.keys($l.NUMBER).join("")+"]+)?(?:\\s*)(?:秒)?)(?:\\s*(A.M.|P.M.|AM?|PM?))?","i");class Bl extends jl.AbstractParserWithWordBoundaryChecking{innerPattern(){return Yl}innerExtract(e,t){if(t.index>0&&e.text[t.index-1].match(/\w/))return null;const n=(0,Wl.default)(e.refDate),r=e.createParsingResult(t.index,t[0]),a=n.clone();if(t[1]){const e=t[1];"明"==e?n.hour()>1&&a.add(1,"day"):"昨"==e?a.add(-1,"day"):"前"==e?a.add(-2,"day"):"大前"==e?a.add(-3,"day"):"后"==e?a.add(2,"day"):"大后"==e&&a.add(3,"day"),r.start.assign("day",a.date()),r.start.assign("month",a.month()+1),r.start.assign("year",a.year())}else if(t[4]){const e=t[4];"明"==e?a.add(1,"day"):"昨"==e?a.add(-1,"day"):"前"==e?a.add(-2,"day"):"大前"==e?a.add(-3,"day"):"后"==e?a.add(2,"day"):"大后"==e&&a.add(3,"day"),r.start.assign("day",a.date()),r.start.assign("month",a.month()+1),r.start.assign("year",a.year())}else r.start.imply("day",a.date()),r.start.imply("month",a.month()+1),r.start.imply("year",a.year());let s=0,i=0,o=-1;if(t[8]){let e=parseInt(t[8]);if(isNaN(e)&&(e=(0,$l.zhStringToNumber)(t[8])),e>=60)return null;r.start.assign("second",e)}if(s=parseInt(t[6]),isNaN(s)&&(s=(0,$l.zhStringToNumber)(t[6])),t[7]?"半"==t[7]?i=30:"正"==t[7]||"整"==t[7]?i=0:(i=parseInt(t[7]),isNaN(i)&&(i=(0,$l.zhStringToNumber)(t[7]))):s>100&&(i=s%100,s=Math.floor(s/100)),i>=60)return null;if(s>24)return null;if(s>=12&&(o=1),t[9]){if(s>12)return null;const e=t[9][0].toLowerCase();"a"==e&&(o=0,12==s&&(s=0)),"p"==e&&(o=1,12!=s&&(s+=12))}else if(t[2]){const e=t[2][0];"早"==e?(o=0,12==s&&(s=0)):"晚"==e&&(o=1,12!=s&&(s+=12))}else if(t[3]){const e=t[3][0];"上"==e||"早"==e||"凌"==e?(o=0,12==s&&(s=0)):"下"!=e&&"晚"!=e||(o=1,12!=s&&(s+=12))}else if(t[5]){const e=t[5][0];"上"==e||"早"==e||"凌"==e?(o=0,12==s&&(s=0)):"下"!=e&&"晚"!=e||(o=1,12!=s&&(s+=12))}if(r.start.assign("hour",s),r.start.assign("minute",i),o>=0?r.start.assign("meridiem",o):s<12?r.start.imply("meridiem",0):r.start.imply("meridiem",1),!(t=Fl.exec(e.text.substring(r.index+r.text.length))))return r.text.match(/^\d+$/)?null:r;const u=a.clone();if(r.end=e.createParsingComponents(),t[1]){const e=t[1];"明"==e?n.hour()>1&&u.add(1,"day"):"昨"==e?u.add(-1,"day"):"前"==e?u.add(-2,"day"):"大前"==e?u.add(-3,"day"):"后"==e?u.add(2,"day"):"大后"==e&&u.add(3,"day"),r.end.assign("day",u.date()),r.end.assign("month",u.month()+1),r.end.assign("year",u.year())}else if(t[4]){const e=t[4];"明"==e?u.add(1,"day"):"昨"==e?u.add(-1,"day"):"前"==e?u.add(-2,"day"):"大前"==e?u.add(-3,"day"):"后"==e?u.add(2,"day"):"大后"==e&&u.add(3,"day"),r.end.assign("day",u.date()),r.end.assign("month",u.month()+1),r.end.assign("year",u.year())}else r.end.imply("day",u.date()),r.end.imply("month",u.month()+1),r.end.imply("year",u.year());if(s=0,i=0,o=-1,t[8]){let e=parseInt(t[8]);if(isNaN(e)&&(e=(0,$l.zhStringToNumber)(t[8])),e>=60)return null;r.end.assign("second",e)}if(s=parseInt(t[6]),isNaN(s)&&(s=(0,$l.zhStringToNumber)(t[6])),t[7]?"半"==t[7]?i=30:"正"==t[7]||"整"==t[7]?i=0:(i=parseInt(t[7]),isNaN(i)&&(i=(0,$l.zhStringToNumber)(t[7]))):s>100&&(i=s%100,s=Math.floor(s/100)),i>=60)return null;if(s>24)return null;if(s>=12&&(o=1),t[9]){if(s>12)return null;const e=t[9][0].toLowerCase();"a"==e&&(o=0,12==s&&(s=0)),"p"==e&&(o=1,12!=s&&(s+=12)),r.start.isCertain("meridiem")||(0==o?(r.start.imply("meridiem",0),12==r.start.get("hour")&&r.start.assign("hour",0)):(r.start.imply("meridiem",1),12!=r.start.get("hour")&&r.start.assign("hour",r.start.get("hour")+12)))}else if(t[2]){const e=t[2][0];"早"==e?(o=0,12==s&&(s=0)):"晚"==e&&(o=1,12!=s&&(s+=12))}else if(t[3]){const e=t[3][0];"上"==e||"早"==e||"凌"==e?(o=0,12==s&&(s=0)):"下"!=e&&"晚"!=e||(o=1,12!=s&&(s+=12))}else if(t[5]){const e=t[5][0];"上"==e||"早"==e||"凌"==e?(o=0,12==s&&(s=0)):"下"!=e&&"晚"!=e||(o=1,12!=s&&(s+=12))}if(r.text=r.text+t[0],r.end.assign("hour",s),r.end.assign("minute",i),o>=0)r.end.assign("meridiem",o);else{r.start.isCertain("meridiem")&&1==r.start.get("meridiem")&&r.start.get("hour")>s?r.end.imply("meridiem",0):s>12&&r.end.imply("meridiem",1)}return r.end.date().getTime()<r.start.date().getTime()&&r.end.imply("day",r.end.get("day")+1),r}}Sl.default=Bl;var Ul={},Ll=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Ul,"__esModule",{value:!0});const Hl=Ll(Ie),zl=tt,Vl=hl,Kl=new RegExp("(?:星期|礼拜|周)(?<weekday>"+Object.keys(Vl.WEEKDAY_OFFSET).join("|")+")");class Gl extends zl.AbstractParserWithWordBoundaryChecking{innerPattern(){return Kl}innerExtract(e,t){const n=e.createParsingResult(t.index,t[0]),r=t.groups.weekday,a=Vl.WEEKDAY_OFFSET[r];if(void 0===a)return null;let s=(0,Hl.default)(e.refDate);const i=s.day();return s=Math.abs(a-7-i)<Math.abs(a-i)?s.day(a-7):Math.abs(a+7-i)<Math.abs(a-i)?s.day(a+7):s.day(a),n.start.assign("weekday",a),n.start.imply("day",s.date()),n.start.imply("month",s.month()+1),n.start.imply("year",s.year()),n}}Ul.default=Gl;var ql={},Zl=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(ql,"__esModule",{value:!0});const Jl=Zl(ln);class Ql extends Jl.default{patternBetween(){return/^\s*(至|到|-|~|～|－|ー)\s*$/i}}ql.default=Ql;var Xl={},ec=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(Xl,"__esModule",{value:!0});const tc=ec(Tn);class nc extends tc.default{patternBetween(){return/^\s*$/i}}Xl.default=nc,function(e){var t=a&&a.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(e,"__esModule",{value:!0}),e.createConfiguration=e.createCasualConfiguration=e.parseDate=e.parse=e.strict=e.casual=e.hans=void 0;const n=zr,r=t(xn),s=Dn,i=t(ul),o=t(fl),u=t(wl),d=t(Nl),l=t(Sl),c=t(Ul),m=t(ql),f=t(Xl);function h(){const e=p();return e.parsers.unshift(new i.default),e}function p(){const e=(0,s.includeCommonConfiguration)({parsers:[new o.default,new d.default,new c.default,new l.default,new u.default],refiners:[new m.default,new f.default]});return e.refiners=e.refiners.filter((e=>!(e instanceof r.default))),e}e.hans=new n.Chrono(h()),e.casual=new n.Chrono(h()),e.strict=new n.Chrono(p()),e.parse=function(t,n,r){return e.casual.parse(t,n,r)},e.parseDate=function(t,n,r){return e.casual.parseDate(t,n,r)},e.createCasualConfiguration=h,e.createConfiguration=p}(ol),function(e){var t=a&&a.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),n=a&&a.__exportStar||function(e,n){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(n,r)||t(n,e,r)};Object.defineProperty(e,"__esModule",{value:!0}),e.hans=void 0,n(cd,e);var r=ol;Object.defineProperty(e,"hans",{enumerable:!0,get:function(){return r.hans}})}(ld),function(e){var t=a&&a.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!("get"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),n=a&&a.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=a&&a.__importStar||function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var a in e)"default"!==a&&Object.prototype.hasOwnProperty.call(e,a)&&t(r,e,a);return n(r,e),r};Object.defineProperty(e,"__esModule",{value:!0}),e.parseDate=e.parse=e.casual=e.strict=e.zh=e.nl=e.pt=e.ja=e.fr=e.de=e.Meridiem=e.Chrono=e.en=void 0;const s=r(ee);e.en=s;const i=zr;var o;Object.defineProperty(e,"Chrono",{enumerable:!0,get:function(){return i.Chrono}}),(o=e.Meridiem||(e.Meridiem={}))[o.AM=0]="AM",o[o.PM=1]="PM";const u=r(ia);e.de=u;const d=r(Xa);e.fr=d;const l=r(li);e.ja=l;const c=r(xi);e.pt=c;const m=r(_o);e.nl=m;const f=r(ld);e.zh=f,e.strict=s.strict,e.casual=s.casual,e.parse=function(t,n,r){return e.casual.parse(t,n,r)},e.parseDate=function(t,n,r){return e.casual.parseDate(t,n,r)}}(X);var rc=s(X);function ac(){const e="en-gb"===window.moment.locale()?new X.Chrono(rc.en.createCasualConfiguration(!0)):new X.Chrono(rc.en.createCasualConfiguration(!1));return e.parsers.push({pattern:()=>/\bChristmas\b/i,extract:()=>({day:25,month:12})}),e.parsers.push({pattern:()=>new RegExp(q),extract:(e,t)=>({day:J(t[0]),month:window.moment().month()})}),e}class sc{constructor(){this.chrono=ac()}getParsedDate(e,t){var n;const r=this.chrono,a=null===(n=r.parse(e)[0])||void 0===n?void 0:n.start.isCertain("weekday"),s="locale-default"===t?H():t,i={weekStart:(o=s,L.indexOf(o))};var o;const u=e.match(/this\s([\w]+)/i),d=e.match(/next\s([\w]+)/i),l=e.match(/(last day of|end of)\s*([^\n\r]*)/i),c=e.match(/mid\s([\w]+)/i),m=a?window.moment().weekday(0).toDate():new Date;if(u&&"week"===u[1])return r.parseDate(`this ${s}`,m);if(d&&"week"===d[1])return r.parseDate(`next ${s}`,m,{forwardDate:!0});if(d&&"month"===d[1]){const t=r.parseDate("this month",new Date,{forwardDate:!0});return r.parseDate(e,t,{forwardDate:!0})}if(d&&"year"===d[1]){const t=r.parseDate("this year",new Date,{forwardDate:!0});return r.parseDate(e,t,{forwardDate:!0})}if(l){const e=r.parse(l[2]),t=e[0].start.get("year"),n=e[0].start.get("month"),a=function(e,t){return new Date(e,t,0).getDate()}(t,n);return r.parseDate(`${t}-${n}-${a}`,new Date,{forwardDate:!0})}return c?r.parseDate(`${c[1]} 15th`,new Date,{forwardDate:!0}):r.parseDate(e,m,{locale:i})}}const ic={autosuggestToggleLink:!0,autocompleteTriggerPhrase:"@",isAutosuggestEnabled:!0,appendTimeToDateWhenRelated:!0,format:"YYYY-MM-DD",defaultAlias:"",timeFormat:"HH:mm",separator:" ",weekStart:"locale-default",modalToggleTime:!1,modalToggleLink:!1,modalMomentFormat:"YYYY-MM-DD HH:mm"},oc=["sunday","monday","tuesday","wednesday","thursday","friday","saturday"];class uc extends e.PluginSettingTab{constructor(e,t){super(e,t),this.plugin=t}display(){const{containerEl:t}=this,n=window.moment.weekdays(),a=H();t.empty(),new e.Setting(t).setName("Format").setHeading(),new e.Setting(t).setName("Date format").setDesc("Specify the format for displaying dates (default: YYYY-MM-DD)").addMomentFormat((e=>e.setDefaultFormat("YYYY-MM-DD").setValue(this.plugin.settings.format).onChange((e=>r(this,void 0,void 0,(function*(){this.plugin.settings.format=e||"YYYY-MM-DD",yield this.plugin.saveSettings()})))))),new e.Setting(t).setName("Time format").setDesc("Specify the format for displaying time (default: HH:mm)").addMomentFormat((e=>e.setDefaultFormat("HH:mm").setValue(this.plugin.settings.timeFormat).onChange((e=>r(this,void 0,void 0,(function*(){this.plugin.settings.timeFormat=e||"HH:mm",yield this.plugin.saveSettings()})))))),new e.Setting(t).setName("Date-time separator").setDesc("Character(s) used to separate date and time (default: space)").addText((e=>e.setPlaceholder("Enter separator").setValue(this.plugin.settings.separator).onChange((e=>r(this,void 0,void 0,(function*(){this.plugin.settings.separator=e||" ",yield this.plugin.saveSettings()})))))),new e.Setting(t).setName("Append time to date when relevant").setDesc("Enable Notion-like behavior. ie. @now includes date and time, while @today includes only the date. If disabled, the plugin will behave like the original version and will use the date format *only* and time format will only be used for commands.").addToggle((e=>e.setValue(this.plugin.settings.appendTimeToDateWhenRelated).onChange((e=>r(this,void 0,void 0,(function*(){this.plugin.settings.appendTimeToDateWhenRelated=e||!1,yield this.plugin.saveSettings()})))))),new e.Setting(t).setName("Week starts on").setDesc("Select the day to be considered as the start of the week").addDropdown((e=>{e.addOption("locale-default",`Locale default (${a})`),n.forEach(((t,n)=>{e.addOption(oc[n],t)})),e.setValue(this.plugin.settings.weekStart.toLowerCase()),e.onChange((e=>r(this,void 0,void 0,(function*(){this.plugin.settings.weekStart=e,yield this.plugin.saveSettings()}))))})),new e.Setting(t).setName("Autosuggestion").setHeading(),new e.Setting(t).setName("Enable date autosuggestion").setDesc(`Toggle to enable or disable the autosuggestion menu, triggered by ${this.plugin.settings.autocompleteTriggerPhrase}`).addToggle((e=>e.setValue(this.plugin.settings.isAutosuggestEnabled).onChange((e=>r(this,void 0,void 0,(function*(){this.plugin.settings.isAutosuggestEnabled=e,yield this.plugin.saveSettings()})))))),new e.Setting(t).setName("Trigger").setDesc("Character(s) to trigger autosuggestion (default: @)").addMomentFormat((e=>e.setPlaceholder(ic.autocompleteTriggerPhrase).setValue(this.plugin.settings.autocompleteTriggerPhrase||"@").onChange((e=>r(this,void 0,void 0,(function*(){this.plugin.settings.autocompleteTriggerPhrase=e.trim(),yield this.plugin.saveSettings()})))))),new e.Setting(t).setName("Wrap dates in links").setDesc("If enabled, dates created via autosuggestion will be wrapped in [[wikilinks]]").addToggle((e=>e.setValue(this.plugin.settings.autosuggestToggleLink).onChange((e=>r(this,void 0,void 0,(function*(){this.plugin.settings.autosuggestToggleLink=e,yield this.plugin.saveSettings()})))))),new e.Setting(t).setName("Default alias for links").setDesc("Specify a time format as the default alias when creating wikilink dates. (default: none)").addText((e=>e.setPlaceholder("dddd, MMMM Do YYYY").setValue(this.plugin.settings.defaultAlias).onChange((e=>r(this,void 0,void 0,(function*(){this.plugin.settings.defaultAlias=e||"",yield this.plugin.saveSettings()}))))))}}class dc extends e.EditorSuggest{constructor(e,t){super(e),this.app=e,this.plugin=t,this.scope.register(["Shift"],"Enter",(e=>(this.suggestions.useSelectedItem(e),!1))),this.plugin.settings.autosuggestToggleLink&&this.setInstructions([{command:"Shift",purpose:"Keep text as alias"}])}getSuggestions(e){const t=this.getDateSuggestions(e);return t.length?t:[{label:e.query}]}getDateSuggestions(e,t=["Now","Today","Yesterday","Tomorrow","In 1 hour","1 hour ago"]){if(e.query.match(/^time/))return["now","+15 minutes","+1 hour","-15 minutes","-1 hour"].map((e=>({label:`time:${e}`}))).filter((t=>t.label.toLowerCase().startsWith(e.query)));if(e.query.match(/(next|last|this)/i)){const t=e.query.match(/(next|last|this)/i)[1];return["week","month","year","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"].map((e=>({label:`${t} ${e}`}))).filter((t=>t.label.toLowerCase().startsWith(e.query)))}const n=e.query.match(/^in ([+-]?\d+)/i)||e.query.match(/^([+-]?\d+)/i);if(n){const t=n[1];return[{label:`in ${t} minutes`},{label:`in ${t} hours`},{label:`in ${t} days`},{label:`in ${t} weeks`},{label:`in ${t} months`},{label:`${t} days ago`},{label:`${t} weeks ago`},{label:`${t} months ago`}].filter((t=>t.label.toLowerCase().startsWith(e.query)))}return t.map((e=>({label:e}))).filter((t=>t.label.toLowerCase().startsWith(e.query)))}renderSuggestion(e,t){t.setText(e.label)}selectSuggestion(e,t){const{editor:n}=this.context,r=t.shiftKey;let a="",s=this.plugin.settings.autosuggestToggleLink;if(e.label.startsWith("time:")){const t=e.label.substring(5);a=this.plugin.parseTime(t).formattedString,s=!1}else a=this.plugin.parseDate(e.label).formattedString;if(s){const t=V(this.plugin,e.label,r);a=z(this.app,a,t)}n.replaceRange(a,this.context.start,this.context.end)}onTrigger(e,t){var n;if(!this.plugin.settings.isAutosuggestEnabled)return null;const r=this.plugin.settings.autocompleteTriggerPhrase,a=(null===(n=this.context)||void 0===n?void 0:n.start)||{line:e.line,ch:e.ch-r.length};if(!t.getRange(a,e).startsWith(r))return null;const s=t.getRange({line:a.line,ch:a.ch-1},a);return s&&/[`a-zA-Z0-9]/.test(s)?null:{start:a,end:e,query:t.getRange(a,e).substring(r.length)}}}function lc(t,n){const{workspace:r}=t.app,a=r.getActiveViewOfType(e.MarkdownView);if(!a)return;const s=a.editor,i=s.getCursor(),o=function(e){if(e.somethingSelected())return e.getSelection();{const t=function(e){const t=e.getCursor(),n=e.posToOffset(t),r=e.cm.state.wordAt(n);return{from:e.offsetToPos(r.from),to:e.offsetToPos(r.to)}}(e);return e.setSelection(t.from,t.to),e.getSelection()}}(s),u=t.parseDate(o);if(!u.moment.isValid())return void s.setCursor({line:i.line,ch:i.ch});let d;if("replace"==n){let e=V(t,o,!1);d=e?`[[${u.formattedString}|${e}]]`:`[[${u.formattedString}]]`}else if("link"==n)d=`[${o}](${u.formattedString})`;else if("clean"==n)d=`${u.formattedString}`;else if("time"==n){d=`${t.parseTime(o).formattedString}`}s.replaceSelection(d),function(e,t,n,r){const a=n.length-r.length;e.setCursor({line:t.line,ch:t.ch+a})}(s,i,d,o),s.focus()}function cc(t,n,r){const{workspace:a}=t.app,s=a.getActiveViewOfType(e.MarkdownView);if(s){s.editor.replaceSelection(window.moment(n).format(r))}}class mc extends e.SuggestModal{constructor(e,t){super(e),this.plugin=t}getSuggestions(e){const t=new dc(this.app,this.plugin).getDateSuggestions({query:e},["Today","Yesterday","Tomorrow"]);return t.map((e=>e.label)).length?t.map((e=>e.label)):[e]}renderSuggestion(e,t){t.createEl("div",{text:e})}onChooseSuggestion(t){return r(this,void 0,void 0,(function*(){const n=this.plugin.parseDate(t),r=n.moment;if(!n.date||!r.isValid())return void new e.Notice("Unable to parse date");const a=yield K(r);this.app.workspace.getLeaf().openFile(a)}))}}class fc extends e.Plugin{onload(){return r(this,void 0,void 0,(function*(){yield this.loadSettings(),this.addCommand({id:"nlp-dates",name:"Parse natural language date",callback:()=>lc(this,"replace")}),this.addCommand({id:"nlp-dates-link",name:"Parse natural language date (as link)",callback:()=>lc(this,"link")}),this.addCommand({id:"nlp-date-clean",name:"Parse natural language date (as plain text)",callback:()=>lc(this,"clean")}),this.addCommand({id:"nlp-parse-time",name:"Parse natural language time",callback:()=>lc(this,"time")}),this.addCommand({id:"nlp-now",name:"Insert the current date and time",callback:()=>function(e){const t=`${e.settings.format}${e.settings.separator}${e.settings.timeFormat}`;cc(e,new Date,t)}(this)}),this.addCommand({id:"nlp-today",name:"Insert the current date",callback:()=>function(e){const t=e.settings.format;cc(e,new Date,t)}(this)}),this.addCommand({id:"nlp-time",name:"Insert the current time",callback:()=>function(e){const t=e.settings.timeFormat;cc(e,new Date,t)}(this)}),this.addCommand({id:"nlp-picker",name:"Date picker",checkCallback:t=>{if(t)return!!this.app.workspace.getActiveViewOfType(e.MarkdownView);new Q(this.app,this).open()}}),this.addCommand({id:"nlp-open-daily-note",name:"Open daily note using natural language",callback:()=>{new mc(this.app,this).open()}}),this.addSettingTab(new uc(this.app,this)),this.registerObsidianProtocolHandler("nldates",this.actionHandler.bind(this)),this.registerEditorSuggest(new dc(this.app,this)),this.app.workspace.onLayoutReady((()=>{this.parser=new sc}))}))}onunload(){console.log("Unloading natural language date parser plugin")}loadSettings(){return r(this,void 0,void 0,(function*(){this.settings=Object.assign({},ic,yield this.loadData())}))}saveSettings(){return r(this,void 0,void 0,(function*(){yield this.saveData(this.settings)}))}parse(e,t){const n=this.parser.getParsedDate(e,this.settings.weekStart),r=function(e,t){return window.moment(e).format(t)}(n,t);return"Invalid date"===r&&console.debug("Input date "+e+" can't be parsed by nldates"),{formattedString:r,date:n,moment:window.moment(n)}}parseDate(e){let t=this.settings.format;return this.settings.appendTimeToDateWhenRelated&&e.match(/\bat\b|\bnow\b|\bin\b|\bago\b/gi)&&(e.match(/\bdays?\b|\bmonths?\b|\byears?\b|\bweeks?\b/gi)||(t+=this.settings.separator+this.settings.timeFormat)),this.parse(e,t)}parseTime(e){return this.parse(e,this.settings.timeFormat)}actionHandler(e){return r(this,void 0,void 0,(function*(){const{workspace:t}=this.app,n=this.parseDate(e.day),r=(a=e.newPane||"yes",["y","yes","1","t","true"].indexOf(a.toLowerCase())>=0);var a;if(n.moment.isValid()){const e=yield K(n.moment);t.getLeaf(r).openFile(e)}}))}}module.exports=fc;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
