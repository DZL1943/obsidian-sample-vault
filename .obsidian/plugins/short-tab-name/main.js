/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ShortTabName
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  ignore: "[0-9]+-",
  show: ".*"
};
var ShortTabName = class extends import_obsidian.Plugin {
  async renameTab() {
    var _a, _b;
    const ignore = (_a = this.settings) == null ? void 0 : _a.ignore;
    const show = (_b = this.settings) == null ? void 0 : _b.show;
    const strregexp = RegExp(`(${ignore})(?<title>${show})`);
    const mdtabs = document.querySelectorAll(".workspace-tab-header[data-type='markdown']");
    mdtabs.forEach(
      (mdtab) => {
        var _a2, _b2, _c;
        const tabname = mdtab.getAttribute("aria-label");
        const match = tabname == null ? void 0 : tabname.match(strregexp);
        const newtabname = (_a2 = match == null ? void 0 : match.groups) == null ? void 0 : _a2["title"];
        const mdtabinners = mdtab.getElementsByClassName("workspace-tab-header-inner-title");
        if (newtabname)
          (_c = (_b2 = mdtabinners.item) == null ? void 0 : _b2.call(mdtabinners, 0)) == null ? void 0 : _c.setText(newtabname);
      }
    );
  }
  async onload() {
    await this.loadSettings();
    await this.renameTab();
    this.addSettingTab(new ShortTabNameSettingTab(this.app, this));
    this.registerEvent(
      this.app.workspace.on("layout-change", () => this.renameTab())
    );
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", () => this.renameTab())
    );
    this.registerEvent(
      this.app.workspace.on("file-open", () => this.renameTab())
    );
    this.registerEvent(
      this.app.vault.on("rename", () => this.renameTab())
    );
    this.registerEvent(
      this.app.metadataCache.on("changed", () => this.renameTab())
    );
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.renameTab();
  }
};
var ShortTabNameSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("ignore").setDesc(`regexp for ignore header of filename 
			default:${DEFAULT_SETTINGS.ignore} 
			`).addText((text) => text.setPlaceholder("[0-9]+-").setValue(this.plugin.settings.ignore).onChange(async (value) => {
      this.plugin.settings.ignore = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("show").setDesc(`regexp for show as tab name 
				default:${DEFAULT_SETTINGS.show} 
				`).addText((text) => text.setPlaceholder(".*").setValue(this.plugin.settings.show).onChange(async (value) => {
      this.plugin.settings.show = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLy8gQ29weXJpZ2h0IChjKSAyMDIzIFNodW1wZWkgVGFuYWthXHJcbi8vIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLCBzZWUgTElDRU5TRS5cclxuXHJcbmltcG9ydCB7IEFwcCwgRWRpdG9yLCBNYXJrZG93blZpZXcsIE1vZGFsLCBOb3RpY2UsIFBsdWdpbiwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZyB9IGZyb20gJ29ic2lkaWFuJztcclxuaW50ZXJmYWNlIFNob3J0VGFiTmFtZVNldHRpbmdzIHtcclxuXHRpZ25vcmU6IHN0cmluZztcclxuXHRzaG93OiBzdHJpbmc7XHJcbn1cclxuXHJcbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IFNob3J0VGFiTmFtZVNldHRpbmdzID0ge1xyXG5cdGlnbm9yZTogJ1swLTldKy0nLFxyXG5cdHNob3c6ICcuKidcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2hvcnRUYWJOYW1lIGV4dGVuZHMgUGx1Z2luIHtcclxuXHRzZXR0aW5nczogU2hvcnRUYWJOYW1lU2V0dGluZ3M7XHJcblxyXG5cdGFzeW5jIHJlbmFtZVRhYigpIHtcclxuXHRcdC8vIGNvbnNvbGUubG9nKFwicmVuYW1pbmdcIik7XHJcblxyXG5cdFx0Y29uc3QgaWdub3JlID0gdGhpcy5zZXR0aW5ncz8uaWdub3JlO1xyXG5cdFx0Y29uc3Qgc2hvdyA9IHRoaXMuc2V0dGluZ3M/LnNob3c7XHJcblx0XHRjb25zdCBzdHJyZWdleHAgPSBSZWdFeHAoYCgke2lnbm9yZX0pKD88dGl0bGU+JHtzaG93fSlgKTtcclxuXHRcdGNvbnN0IG1kdGFicyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIud29ya3NwYWNlLXRhYi1oZWFkZXJbZGF0YS10eXBlPSdtYXJrZG93biddXCIpO1xyXG5cdFx0bWR0YWJzLmZvckVhY2goXHJcblx0XHRcdChtZHRhYik9PntcclxuXHRcdFx0XHRcdGNvbnN0IHRhYm5hbWUgPSBtZHRhYi5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKTtcclxuXHRcdFx0XHRcdGNvbnN0IG1hdGNoID0gdGFibmFtZT8ubWF0Y2goc3RycmVnZXhwKTtcclxuXHRcdFx0XHRcdGNvbnN0IG5ld3RhYm5hbWUgPSBtYXRjaD8uZ3JvdXBzPy5bJ3RpdGxlJ107XHJcblx0XHRcdFx0XHRjb25zdCBtZHRhYmlubmVycyA9IG1kdGFiLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3dvcmtzcGFjZS10YWItaGVhZGVyLWlubmVyLXRpdGxlJyk7XHJcblx0XHRcdFx0XHRpZihuZXd0YWJuYW1lKVxyXG5cdFx0XHRcdFx0XHRtZHRhYmlubmVycy5pdGVtPy4oMCk/LnNldFRleHQobmV3dGFibmFtZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHQpO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgb25sb2FkKCkge1xyXG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcclxuXHRcdGF3YWl0IHRoaXMucmVuYW1lVGFiKCk7XHJcblxyXG5cdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBTaG9ydFRhYk5hbWVTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XHJcblxyXG5cdFx0dGhpcy5yZWdpc3RlckV2ZW50KFxyXG5cdFx0XHR0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ2xheW91dC1jaGFuZ2UnLCgpPT50aGlzLnJlbmFtZVRhYigpKVxyXG5cdFx0KTtcclxuXHJcblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnQoXHJcblx0XHRcdHRoaXMuYXBwLndvcmtzcGFjZS5vbignYWN0aXZlLWxlYWYtY2hhbmdlJywoKT0+dGhpcy5yZW5hbWVUYWIoKSlcclxuXHRcdCk7XHJcblxyXG5cdFx0dGhpcy5yZWdpc3RlckV2ZW50KFxyXG5cdFx0XHR0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ2ZpbGUtb3BlbicsKCk9PnRoaXMucmVuYW1lVGFiKCkpXHJcblx0XHQpO1xyXG5cclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudChcclxuXHRcdFx0dGhpcy5hcHAudmF1bHQub24oJ3JlbmFtZScsKCk9PnRoaXMucmVuYW1lVGFiKCkpXHJcblx0XHQpO1xyXG5cdFx0dGhpcy5yZWdpc3RlckV2ZW50KFxyXG5cdFx0XHR0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLm9uKCdjaGFuZ2VkJywoKT0+dGhpcy5yZW5hbWVUYWIoKSlcclxuXHRcdCk7XHJcblxyXG5cdH1cclxuXHJcblx0b251bmxvYWQoKSB7XHJcblx0fVxyXG5cclxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XHJcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcclxuXHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XHJcblx0XHR0aGlzLnJlbmFtZVRhYigpO1xyXG5cdH1cclxufVxyXG5jbGFzcyBTaG9ydFRhYk5hbWVTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XHJcblx0cGx1Z2luOiBTaG9ydFRhYk5hbWU7XHJcblxyXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IFNob3J0VGFiTmFtZSkge1xyXG5cdFx0c3VwZXIoYXBwLCBwbHVnaW4pO1xyXG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XHJcblx0fVxyXG5cclxuXHRkaXNwbGF5KCk6IHZvaWQge1xyXG5cdFx0Y29uc3Qge2NvbnRhaW5lckVsfSA9IHRoaXM7XHJcblxyXG5cdFx0Y29udGFpbmVyRWwuZW1wdHkoKTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ2lnbm9yZScpXHJcblx0XHRcdC5zZXREZXNjKGByZWdleHAgZm9yIGlnbm9yZSBoZWFkZXIgb2YgZmlsZW5hbWUgXHJcblx0XHRcdGRlZmF1bHQ6JHtERUZBVUxUX1NFVFRJTkdTLmlnbm9yZX0gXHJcblx0XHRcdGApXHJcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG5cdFx0XHRcdC5zZXRQbGFjZWhvbGRlcignWzAtOV0rLScpXHJcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmlnbm9yZSlcclxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5pZ25vcmUgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdH0pKTtcclxuXHJcblx0XHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHRcdC5zZXROYW1lKCdzaG93JylcclxuXHRcdFx0XHQuc2V0RGVzYyhgcmVnZXhwIGZvciBzaG93IGFzIHRhYiBuYW1lIFxyXG5cdFx0XHRcdGRlZmF1bHQ6JHtERUZBVUxUX1NFVFRJTkdTLnNob3d9IFxyXG5cdFx0XHRcdGApXHJcblx0XHRcdFx0LmFkZFRleHQodGV4dCA9PiB0ZXh0XHJcblx0XHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJy4qJylcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93KVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5zaG93ID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdFx0fSkpO1xyXG5cdFx0fVxyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFHQSxzQkFBNEY7QUFNNUYsSUFBTSxtQkFB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
